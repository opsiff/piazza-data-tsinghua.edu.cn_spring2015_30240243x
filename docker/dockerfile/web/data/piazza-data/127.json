{"aid": "igkp45pw66z25j", "error": null, "result": {"default_anonymity": "no", "status": "active", "i_edits": [], "q_edits": [], "bookmarked": 3, "request_instructor": 0, "history": [{"uid": "i72xyao1QhO", "anon": "no", "created": "2015-03-17T08:18:57Z", "content": "<p>参考答案里面冗余:</p>\n<p>冗余是在两个地方都将ss和esp考虑进去了(继<a href=\"https://www.piazza.com/class/i5j09fnsl7k5x0?cid=122\">Ray Chow</a>提出的问题):</p>\n<p>第一个位置:在触发中断的时候已经预留了空间ss和esp的空间,如下:</p>\n<p>lab1_switch_to_user(void) {<br />    //LAB1 CHALLENGE 1 : TODO<br />    asm volatile (<br />        &#34;sub $0x8, %%esp \\n&#34;<br />        &#34;int %0 \\n&#34;<br />        &#34;movl %%ebp, %%esp&#34;<br />        : <br />        : &#34;i&#34;(T_SWITCH_TOU)<br />    );<br />}</p>\n<p>进入这个函数lab1_switch_to_user的时候由于没有局部变量,所以ebp和esp相等,sub $0x8, %%esp, 将栈抬高了8个字节,相当于ss和esp两个寄存器的值, 然后进入int中断处理,</p>\n<p>而在trap_dispatch中又在设置trap_frame里面减去了个8,如下:</p>\n<p>switchk2u.tf_esp = (uint32_t)tf &#43; sizeof(struct trapframe)- 8;</p>\n<p>其实这个就是多余的,这里可能就是作者写这部分觉得前面没有预留,所以往前又推了8个字节,</p>\n<p>我在<a href=\"https://www.piazza.com/class/i5j09fnsl7k5x0?cid=122\">Ray Chow</a>提出的问题中画了一个栈的示意图,那个是我自己代码栈的示意图,而参考答案中的示意图如下:</p>\n<p>目前栈的示意:</p>\n<p>-----------栈顶</p>\n<p>各种局部变量(trap_dispatch中的局部变量)</p>\n<p>eip(trap_dispatch函数压入)</p>\n<p>ebp(trap_dispatch函数压入)</p>\n<p>trapfram指针(trap_dispatch参数)</p>\n<p>eip(trapentry中的call指令压入的)</p>\n<p>esp(就是个参数,相当于那个trapframe指针)</p>\n<p>trapframe(不含ss和esp)</p>\n<p>8字节(在lab1_switch_to_user中sub出来的空间)</p>\n<p>老数据</p>\n<p>-----------栈底</p>\n<p>此时,将返回栈顶置为switchk2u.tf_esp = (uint32_t)tf &#43; sizeof(struct trapframe)- 8;它本意是指向上个trapframe也就是老数据,但是却指向了8个字节的那个位置,这是有问题的,此时可以试试打印出来老数据对应的函数栈信息是混乱的,也就是指的是错误的.u2k的部分情况类似.</p>\n<p>    但是程序代码并没有产生问题,问题就在于lab1_switch_to_user函数在int之后,&#34;movl %%ebp, %%esp&#34;,这个其实就是又将esp减了个8,从而相当于人为的把esp恢复了下.</p>\n<p>   在这两个地方,可以直接将中断写成#define int_gate(gate) {asm volatile (&#34;int %0&#34; :: &#34;i&#34; (gate));},,,,,或者将trap_dispatch中的-8去掉(直接修改原来的trapframe栈)都可以正确执行(经过测试).</p>", "subject": "扩展实验1的参考答案中里面有冗余(中间的指向有问题)!"}, {"uid": "i72xyao1QhO", "anon": "no", "created": "2015-03-17T08:17:00Z", "content": "<p>参考答案里面冗余:</p>\n<p>冗余是在两个地方都将ss和esp考虑进去了(继<a href=\"https://www.piazza.com/class/i5j09fnsl7k5x0?cid=122\">Ray Chow</a>提出的问题):</p>\n<p>第一个位置:在触发中断的时候已经预留了空间ss和esp的空间,如下:</p>\n<p>lab1_switch_to_user(void) {<br />    //LAB1 CHALLENGE 1 : TODO<br />    asm volatile (<br />        &#34;sub $0x8, %%esp \\n&#34;<br />        &#34;int %0 \\n&#34;<br />        &#34;movl %%ebp, %%esp&#34;<br />        : <br />        : &#34;i&#34;(T_SWITCH_TOU)<br />    );<br />}</p>\n<p>进入这个函数lab1_switch_to_user的时候由于没有局部变量,所以ebp和esp相等,sub $0x8, %%esp, 将栈抬高了8个字节,相当于ss和esp两个寄存器的值, 然后进入int中断处理,</p>\n<p>而在trap_dispatch中又在设置trap_frame里面减去了个8,如下:</p>\n<p>switchu2k = (struct trapframe *)(tf-&gt;tf_esp) - (sizeof(struct trapframe) - 8);</p>\n<p>其实这个就是多余的,这里可能就是作者写这部分觉得前面没有预留,所以往前又推了8个字节,</p>\n<p>我在<a href=\"https://www.piazza.com/class/i5j09fnsl7k5x0?cid=122\">Ray Chow</a>提出的问题中画了一个栈的示意图,那个是我自己代码栈的示意图,而参考答案中的示意图如下:</p>\n<p>目前栈的示意:</p>\n<p>-----------栈顶</p>\n<p>各种局部变量(trap_dispatch中的局部变量)</p>\n<p>eip(trap_dispatch函数压入)</p>\n<p>ebp(trap_dispatch函数压入)</p>\n<p>trapfram指针(trap_dispatch参数)</p>\n<p>eip(trapentry中的call指令压入的)</p>\n<p>esp(就是个参数,相当于那个trapframe指针)</p>\n<p>trapframe(不含ss和esp)</p>\n<p>8字节(在lab1_switch_to_user中sub出来的空间)</p>\n<p>老数据</p>\n<p>-----------栈底</p>\n<p>此时,将返回栈顶置为switchk2u.tf_esp = (uint32_t)tf &#43; sizeof(struct trapframe)- 8;它本意是指向上个trapframe也就是老数据,但是却指向了8个字节的那个位置,这是有问题的,此时可以试试打印出来老数据对应的函数栈信息是混乱的,也就是指的是错误的.</p>\n<p>    但是程序代码并没有产生问题,问题就在于lab1_switch_to_user函数在int之后,&#34;movl %%ebp, %%esp&#34;,这个其实就是又将esp减了个8,从而相当于人为的把esp恢复了下.</p>\n<p>   在这两个地方,可以直接将中断写成#define int_gate(gate) {asm volatile (&#34;int %0&#34; :: &#34;i&#34; (gate));},,,,,或者将trap_dispatch中的-8去掉(直接修改原来的trapframe栈)都可以正确执行(经过测试).</p>", "subject": "扩展实验1的参考答案中里面有冗余(中间的指向有问题)!"}, {"uid": "i72xyao1QhO", "anon": "no", "created": "2015-03-17T08:11:01Z", "content": "<p>参考答案里面冗余:</p>\n<p>冗余是在两个地方都将ss和esp考虑进去了(继<a href=\"https://www.piazza.com/class/i5j09fnsl7k5x0?cid=122\">Ray Chow</a>提出的问题):</p>\n<p>第一个位置:在触发中断的时候已经预留了空间ss和esp的空间,如下:</p>\n<p>lab1_switch_to_user(void) {<br />    //LAB1 CHALLENGE 1 : TODO<br />    asm volatile (<br />        &#34;sub $0x8, %%esp \\n&#34;<br />        &#34;int %0 \\n&#34;<br />        &#34;movl %%ebp, %%esp&#34;<br />        : <br />        : &#34;i&#34;(T_SWITCH_TOU)<br />    );<br />}</p>\n<p>进入这个函数lab1_switch_to_user的时候由于没有局部变量,所以ebp和esp相等,sub $0x8, %%esp, 将栈抬高了8个字节,相当于ss和esp两个寄存器的值, 然后进入int中断处理,</p>\n<p>而在trap_dispatch中又将在设置trap_frame里面减去了个8,如下:</p>\n<p>switchu2k = (struct trapframe *)(tf-&gt;tf_esp) - (sizeof(struct trapframe) - 8);</p>\n<p>其实这个就是多余的,这里可能就是作者写这部分觉得前面没有预留,所以往前有推了8个字节,</p>\n<p>我在<a href=\"https://www.piazza.com/class/i5j09fnsl7k5x0?cid=122\">Ray Chow</a>提出的问题中画了一个栈的示意图,那个是我自己代码栈的示意图,而参考答案中的示意图如下:</p>\n<p>目前栈的示意:</p>\n<p>-----------栈顶</p>\n<p>各种局部变量(trap_dispatch中的局部变量)</p>\n<p>eip(trap_dispatch函数压入)</p>\n<p>ebp(trap_dispatch函数压入)</p>\n<p>trapfram指针(trap_dispatch参数)</p>\n<p>eip(trapentry中的call指令压入的)</p>\n<p>esp(就是个参数,相当于那个trapframe指针)</p>\n<p>trapframe(不含ss和esp)</p>\n<p>8字节(在lab1_switch_to_user中sub出来的空间)</p>\n<p>老数据</p>\n<p>-----------栈底</p>\n<p>此时,将返回栈顶置为switchk2u.tf_esp = (uint32_t)tf &#43; sizeof(struct trapframe)- 8;它本意是指向上个trapframe也就是老数据,但是却指向了8个字节的那个位置,这是有问题的,此时可以试试打印出来老数据对应的函数栈信息是混乱的,也就是指的是错误的.</p>\n<p>    但是程序代码并没有产生问题,问题就在于lab1_switch_to_user函数在int之后,&#34;movl %%ebp, %%esp&#34;,这个其实就是又将esp减了个8,从而相当于人为的把esp恢复了下.</p>\n<p>   在这两个地方,可以直接将中断写成#define int_gate(gate) {asm volatile (&#34;int %0&#34; :: &#34;i&#34; (gate));},,,,,或者将trap_dispatch中的-8去掉(直接修改原来的trapframe栈)都可以正确执行(经过测试).</p>", "subject": "扩展实验1的参考答案中里面有冗余(中间的指向有问题)!"}], "s_edits": [], "is_bookmarked": false, "tag_good_arr": ["hcrrjuyequh4bt"], "request_instructor_me": false, "my_favorite": false, "t": 1446634979060, "children": [{"is_tag_endorse": false, "created": "2015-03-18T00:07:55Z", "id": "i7dyzyt5e161sy", "tag_endorse": [], "folders": [], "history": [{"uid": "hdjoucuyb836fq", "anon": "no", "created": "2015-03-18T00:07:56Z", "content": "<p>k2u的情况诚如你所言&#xff0c;sub 0x8和trap_dispatch里的T_SWITCH_TOU部分有冲突。我们会在参考答案中去掉sub 0x8这样的操作&#xff0c;保留现在使用临时栈的实现。</p>\n<p></p>\n<p>关于u2k的部分&#xff0c;情况和k2u还是有所差别&#xff1a;栈上内容的混乱不是int前后esp不同&#xff08;把lab1_switch_to_kernel中的movl删掉没有影响&#xff09;&#xff0c;而是trap_dispatch里的T_SWITCH_TOK里把tf做了memmove&#xff0c;使得栈上多出来了8个字节。这一问题的修正用的是trapentry.S第27行的popl %esp。</p>\n<p></p>", "subject": ""}], "config": {}, "data": {"embed_links": []}, "bucket_order": 2, "bucket_name": "Today", "tag_endorse_arr": [], "children": [], "type": "i_answer"}], "type": "question", "unique_views": 99, "created": "2015-03-17T08:11:01Z", "id": "i7d0tdo4swib6", "no_answer": 0, "nr": 127, "data": {"embed_links": []}, "upvote_ids": [], "is_tag_good": false, "config": {}, "folders": ["lab1", "文档纠错"], "bucket_order": 2, "change_log": [{"uid": "i72xyao1QhO", "when": "2015-03-17T08:11:01Z", "data": "i7d0tdo7y0ob7", "anon": "no", "type": "create"}, {"uid": "i72xyao1QhO", "when": "2015-03-17T08:17:00Z", "data": "i7d1133x87x20k", "anon": "no", "type": "update"}, {"uid": "i72xyao1QhO", "when": "2015-03-17T08:18:57Z", "data": "i7d13la7apt2ft", "anon": "no", "type": "update"}, {"uid": "hdjoucuyb836fq", "when": "2015-03-18T00:07:56Z", "data": "i7dyzzany811t0", "to": "i7d0tdo4swib6", "anon": "no", "type": "i_answer"}], "bucket_name": "Today", "tags": ["lab1", "student", "文档纠错"], "no_answer_followup": 0, "num_favorites": 2, "tag_good": [{"class_sections": ["课程设计_i5j09fnsl7k5x0"], "name": "Yu Chen", "id": "hcrrjuyequh4bt", "role": "instructor", "facebook_id": null, "photo": "1378950179_35.png", "admin": true, "us": false}]}}