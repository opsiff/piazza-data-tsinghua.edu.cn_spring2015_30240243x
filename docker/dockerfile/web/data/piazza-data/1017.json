{"aid": "j0nzh9m4o9j3du", "result": {"status": "active", "unique_views": 46, "request_instructor_me": false, "change_log": [{"type": "create", "anon": "no", "when": "2017-03-21T06:12:56Z", "data": "j0j58n63g5l7i1", "uid": "izb0ce5rlex6xc"}, {"type": "update", "anon": "no", "when": "2017-03-24T00:53:04Z", "data": "j0n44urq2gv326", "uid": "hdjonbiyfs62ie"}, {"uid": "hdjonbiyfs62ie", "type": "i_answer", "when": "2017-03-24T01:04:03Z", "to": "j0j58n62q4p7i0", "anon": "no", "data": "j0n4izav3ao3qm"}], "upvote_ids": [], "id": "j0j58n62q4p7i0", "bookmarked": 5, "no_answer": 0, "i_edits": [], "is_bookmarked": false, "children": [{"folders": [], "is_tag_endorse": false, "created": "2017-03-24T01:04:03Z", "type": "i_answer", "tag_endorse_arr": [], "id": "j0n4izao1s93ql", "bucket_name": "Today", "config": {}, "tag_endorse": [], "bucket_order": 2, "data": {"embed_links": []}, "children": [], "history": [{"content": "<p>在我们的ucore代码并没有实现复杂的页面共享机制&#xff0c;仅涉及了“写时复制COW”。相关代码见缺页异常的处理函数do_pgfault。</p>\n<p></p>\n<p>有兴趣的同学可以对照代码描述ucore中的COW机制是如何工作的&#xff0c;从而理解页面是如何被共享的。</p>", "anon": "no", "created": "2017-03-24T01:04:03Z", "uid": "hdjonbiyfs62ie", "subject": ""}]}], "nr": 1017, "bucket_order": 2, "type": "question", "folders": ["lecture9", "课堂问答", "2017"], "no_answer_followup": 0, "num_favorites": 0, "bucket_name": "Today", "q_edits": [], "data": {"embed_links": []}, "request_instructor": 0, "tags": ["2017", "lecture9", "student", "课堂问答"], "created": "2017-03-21T06:12:56Z", "is_tag_good": false, "config": {}, "s_edits": [], "my_favorite": false, "default_anonymity": "no", "t": 1490369432044, "tag_good": [], "tag_good_arr": [], "history": [{"content": "<p>clock算法是基于pte上的access bit和dirty bit&#xff08;扩展clock算法&#xff09;的&#xff0c;但是pte描述的对象是线性地址&#xff0c;clock算法实际处理的是物理地址&#xff0c;这两个之间存在一定差别。</p>\n<p>具体来讲&#xff0c;如果多个线性地址被映射到了同一个物理地址&#xff0c;clock算法应该怎样判断这个物理地址是否被读或者写了呢&#xff1f;</p>\n<p>课上好像讨论了这个问题&#xff0c;向老师给的结论貌似是&#xff0c;实际操作系统中有非常复杂的实现&#xff0c;对每个物理页被访问的次数有额外的数据结构进行维护。</p>\n<p>可是这样是不是就意味着clock算法的利用资源较少的特点&#xff08;优势&#xff09;没有体现出来呢&#xff1f;</p>", "anon": "no", "created": "2017-03-24T00:53:04Z", "uid": "hdjonbiyfs62ie", "subject": "多个页表项指向同一个页时&#xff0c;clock算法应该怎样实现&#xff1f;"}, {"content": "<p>clock算法是基于pte上的access bit和dirty bit&#xff08;扩展clock算法&#xff09;的&#xff0c;但是pte描述的对象是线性地址&#xff0c;clock算法实际处理的是物理地址&#xff0c;这两个之间存在一定差别。</p>\n<p>具体来讲&#xff0c;如果多个线性地址被映射到了同一个物理地址&#xff0c;clock算法应该怎样判断这个物理地址是否被读或者写了呢&#xff1f;</p>\n<p>课上好像讨论了这个问题&#xff0c;向老师给的结论貌似是&#xff0c;实际操作系统中有非常复杂的实现&#xff0c;对每个物理页被访问的次数有额外的数据结构进行维护。</p>\n<p>可是这样是不是就意味着clock算法的利用资源较少的特点&#xff08;优势&#xff09;没有体现出来呢&#xff1f;</p>", "anon": "no", "created": "2017-03-21T06:12:56Z", "uid": "izb0ce5rlex6xc", "subject": "多个页表项指向同一个页时&#xff0c;clock算法应该怎样实现&#xff1f;"}]}, "error": null}