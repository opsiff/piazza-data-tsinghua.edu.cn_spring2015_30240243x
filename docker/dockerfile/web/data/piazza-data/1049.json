{"aid": "j1kultlnu877ne", "result": {"status": "active", "unique_views": 10, "request_instructor_me": false, "change_log": [{"type": "create", "anon": "no", "when": "2017-04-15T14:50:24Z", "data": "j1jdqey6ume1h5", "uid": "ie7xxz4di3o1ke"}, {"type": "update", "anon": "no", "when": "2017-04-15T14:56:25Z", "data": "j1jdy59yjdd1vj", "uid": "ie7xxz4di3o1ke"}, {"type": "update", "anon": "no", "when": "2017-04-15T14:57:29Z", "data": "j1jdzipldeh5wu", "uid": "ie7xxz4di3o1ke"}, {"type": "update", "anon": "no", "when": "2017-04-15T14:57:54Z", "data": "j1je022jepo1rk", "uid": "ie7xxz4di3o1ke"}, {"type": "update", "anon": "no", "when": "2017-04-15T14:58:56Z", "data": "j1je1dag5ox2hl", "uid": "ie7xxz4di3o1ke"}, {"uid": "hdjonbiyfs62ie", "type": "i_answer", "when": "2017-04-16T04:16:00Z", "to": "j1jdqey228h1h4", "anon": "no", "data": "j1k6if1qlo54wf"}, {"type": "i_answer_update", "anon": "no", "when": "2017-04-16T04:16:26Z", "data": "j1k6iyp6gsvfl", "uid": "hdjonbiyfs62ie"}], "upvote_ids": [], "id": "j1jdqey228h1h4", "bookmarked": 2, "no_answer": 0, "i_edits": [], "is_bookmarked": false, "children": [{"folders": [], "is_tag_endorse": false, "created": "2017-04-16T04:16:00Z", "type": "i_answer", "tag_endorse_arr": [], "id": "j1k6if1lxa04we", "bucket_name": "Today", "config": {}, "tag_endorse": [], "bucket_order": 2, "data": {"embed_links": []}, "children": [], "history": [{"content": "<p>对于第一个问题&#xff0c;我的理解是&#xff0c;forkret在iret处会有中断现场的恢复。然后就开始正常执行了。请实际跟踪系统在这段的行为&#xff0c;然后回复结果或继续置疑。</p>\n<p></p>\n<p>对于第二个问题&#xff0c;这是为了避免宏展开时可能导致的错误。下面链接有详细的描述&#xff0c;供参考。请实际分析有和没有&#34;do {} while (0)&#34;时&#xff0c;生成的宏展开有什么差别。请回复分析结果。</p>\n<p></p>\n<p><a href=\"http://www.cnblogs.com/Lyush/p/3504559.html\">http://www.cnblogs.com/Lyush/p/3504559.html</a></p>\n<p></p>", "anon": "no", "created": "2017-04-16T04:16:26Z", "uid": "hdjonbiyfs62ie", "subject": ""}, {"content": "<p>对于第一个问题&#xff0c;我的理解是&#xff0c;forkret在iret处会有中断现场的恢复。然后就开始正常执行了。请实际跟踪系统在这段的行为&#xff0c;然后回复结果或继续置疑。</p>\n<p></p>\n<p>对于第二个问题&#xff0c;这是为了避免宏展开时可能导致的错误。下面链接有详细的描述&#xff0c;供参考。请实际分析有和没有&#34;do {} while (0)&#34;时&#xff0c;生成的宏展开有什么差别。请回复分析结果。</p>\n<p></p>", "anon": "no", "created": "2017-04-16T04:16:00Z", "uid": "hdjonbiyfs62ie", "subject": ""}]}], "nr": 1049, "bucket_order": 2, "type": "question", "folders": ["lab4"], "no_answer_followup": 0, "num_favorites": 0, "bucket_name": "Today", "q_edits": [], "data": {"embed_links": []}, "request_instructor": 0, "tags": ["lab4", "student"], "created": "2017-04-15T14:50:24Z", "is_tag_good": false, "config": {}, "s_edits": [], "my_favorite": false, "default_anonymity": "no", "t": 1492356630299, "tag_good": [{"name": "Yong XIANG", "admin": true, "photo": null, "us": false, "id": "hdjonbiyfs62ie", "class_sections": ["课程设计_i5j09fnsl7k5x0", "清华学生_i5j09fnsl7k5x0", "所有老师和助教_i5j09fnsl7k5x0"], "role": "instructor", "facebook_id": null, "email": "xyong@tsinghua.edu.cn", "admin_permission": 10}], "tag_good_arr": ["hdjonbiyfs62ie"], "history": [{"content": "<p></p>\n<pre>local_intr_save(intr_flag);\n{\n    current = proc;\n    load_esp0(next-&gt;kstack &#43; KSTACKSIZE);\n    lcr3(next-&gt;cr3);\n    switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));\n}\nlocal_intr_restore(intr_flag);</pre>\n<p>这是proc_run中的一段。</p>\n<p></p>\n<p>有2个疑问&#xff1a;</p>\n<p></p>\n<p>①在进行<code>switch_to</code>操作时&#xff0c;ret时&#xff0c;已经将运行环境的8个寄存器从from进程的换成了to进程的&#xff0c;因此在ret后直接跳转到<code>forkret</code>&#xff0c;进而iret到<code>kernel_thread_entry</code>处开始运行<code>main</code>&#xff0c;那么上述代码中的最后一行将迟迟不能执行&#xff0c;也就是说中断被关闭后迟迟不能开启&#xff0c;导致中断堵塞&#xff0c;直到main进程执行<code>do_exit</code>操作。这是合理的吗&#xff1f;或者是我理解错了&#xff1f;</p>\n<p></p>\n<p>②<code>local_intr_save(intr_flag)</code>是一个宏&#xff0c;其内容为</p>\n<pre>#define local_intr_save(x)   do { x = __intr_save(); } while (0)</pre>\n<p>为什么要采用<code>while(0)</code>这种奇怪的写法&#xff1f;</p>\n<p></p>", "anon": "no", "created": "2017-04-15T14:58:56Z", "uid": "ie7xxz4di3o1ke", "subject": "【lab4】proc_run中的中断开闭问题"}, {"content": "<p></p>\n<pre>local_intr_save(intr_flag);\n{\n    current = proc;\n    load_esp0(next-&gt;kstack &#43; KSTACKSIZE);\n    lcr3(next-&gt;cr3);\n    switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));\n}\nlocal_intr_restore(intr_flag);</pre>\n<p>这是proc_run中的一段。</p>\n<p></p>\n<p>有2个疑问&#xff1a;</p>\n<p></p>\n<p>①在进行<code>switch_to</code>操作时&#xff0c;ret时&#xff0c;已经将运行环境的8个寄存器从from进程的换成了to进程的&#xff0c;因此在ret后直接跳转到<code>forkret</code>&#xff0c;进而iret到<code>kernel_thread_entry</code>处开始运行<code>main</code>&#xff0c;那么上述代码中的最后一行将迟迟不能执行&#xff0c;也就是说中断被关闭后迟迟不能开启&#xff0c;导致中断堵塞&#xff0c;直到main进程执行<code>do_exit</code>操作。这是合理的吗&#xff1f;或者是我理解错了&#xff1f;</p>\n<p></p>\n<p>②<code>local_intr_save(intr_flag)</code>是一个宏&#xff0c;其内容为</p>\n<pre>#define local_intr_save(x)   do { x = __intr_save(); } while (0)</pre>\n<p>为什么要采用<code>while(0)</code>这种奇怪的写法&#xff1f;</p>\n<p></p>", "anon": "no", "created": "2017-04-15T14:57:54Z", "uid": "ie7xxz4di3o1ke", "subject": "【lab4】proc_run中的中断开闭问题"}, {"content": "<p></p>\n<pre>local_intr_save(intr_flag);\n{\n    current = proc;\n    load_esp0(next-&gt;kstack &#43; KSTACKSIZE);\n    lcr3(next-&gt;cr3);\n    switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));\n}\nlocal_intr_restore(intr_flag);</pre>\n<p>这是proc_run中的一段。</p>\n<p></p>\n<p>有2个疑问&#xff1a;</p>\n<p></p>\n<p>①在进行<code>switch_to</code>操作时&#xff0c;<span style=\"text-decoration:underline\">ret</span>时&#xff0c;已经将运行环境的8个寄存器从<span style=\"text-decoration:underline\">from</span>进程的换成了<span style=\"text-decoration:underline\">to</span>进程的&#xff0c;因此在<span style=\"text-decoration:underline\">ret</span>后直接跳转到<code>forkret</code>&#xff0c;进而<span style=\"text-decoration:underline\">iret</span>到<code>kernel_thread_entry</code>处开始运行<code>main</code>&#xff0c;那么上述代码中的最后一行将迟迟不能执行&#xff0c;也就是说中断被关闭后迟迟不能开启&#xff0c;导致中断堵塞&#xff0c;直到main进程执行<code>do_exit</code>操作。这是合理的吗&#xff1f;或者是我理解错了&#xff1f;</p>\n<p></p>\n<p>②<code>local_intr_save(intr_flag)</code>是一个宏&#xff0c;其内容为</p>\n<pre>#define local_intr_save(x)   do { x = __intr_save(); } while (0)</pre>\n<p>为什么要采用<code>while(0)</code>这种奇怪的写法&#xff1f;</p>\n<p></p>", "anon": "no", "created": "2017-04-15T14:57:29Z", "uid": "ie7xxz4di3o1ke", "subject": "【lab4】proc_run中的中断开闭问题"}, {"content": "<p></p>\n<pre>local_intr_save(intr_flag);\n{\n    current = proc;\n    load_esp0(next-&gt;kstack &#43; KSTACKSIZE);\n    lcr3(next-&gt;cr3);\n    switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));\n}\nlocal_intr_restore(intr_flag);</pre>\n<p>这是proc_run中的一段。</p>\n<p></p>\n<p>有2个疑问&#xff1a;</p>\n<p></p>\n<p>①在进行<code>switch_to</code>操作时&#xff0c;ret时&#xff0c;已经将运行环境的8个寄存器从from进程的换成了to进程的&#xff0c;因此在ret后直接跳转到forkret&#xff0c;进而iret到kernel_thread_entry处开始运行main&#xff0c;那么上述代码中的最后一行将迟迟不能执行&#xff0c;也就是说中断被关闭后迟迟不能开启&#xff0c;导致中断堵塞&#xff0c;直到main进程执行do_exit操作。这是合理的吗&#xff1f;或者是我理解错了&#xff1f;</p>\n<p></p>\n<p>②<code>local_intr_save(intr_flag)</code>是一个宏&#xff0c;其内容为</p>\n<pre>#define local_intr_save(x)   do { x = __intr_save(); } while (0)</pre>\n<p>为什么要采用<code>while(0)</code>这种奇怪的写法&#xff1f;</p>\n<p></p>", "anon": "no", "created": "2017-04-15T14:56:25Z", "uid": "ie7xxz4di3o1ke", "subject": "【lab4】proc_run中的中断开闭问题"}, {"content": "<p></p><pre>local_intr_save(intr_flag);<br />{<br />    current = proc;<br />    load_esp0(next-&gt;kstack &#43; KSTACKSIZE);<br />    lcr3(next-&gt;cr3);<br />    switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));<br />}<br />local_intr_restore(intr_flag);</pre>\n<p>这是proc_run中的一段。</p>\n<p></p>\n<p>有2个疑问&#xff1a;</p>\n<p></p>\n<p>①在进行<code>switch_to</code>操作时&#xff0c;ret时&#xff0c;已经将运行环境的8个寄存器从from进程的换成了to进程的&#xff0c;因此在ret后直接跳转到forkret&#xff0c;进而iret到kernel_thread_entry处开始运行main&#xff0c;那么上述代码中的最后一行将迟迟不能执行&#xff0c;也就是说中断被关闭后迟迟不能开启&#xff0c;导致中断堵塞。这是合理的吗&#xff1f;或者是我理解错了&#xff1f;</p>\n<p></p>\n<p>②<code>local_intr_save(intr_flag)</code>是一个宏&#xff0c;其内容为</p>\n<pre>#define local_intr_save(x)   do { x = __intr_save(); } while (0)</pre>\n<p>为什么要采用<code>while(0)</code>这种奇怪的写法&#xff1f;</p>\n<p></p>", "anon": "no", "created": "2017-04-15T14:50:24Z", "uid": "ie7xxz4di3o1ke", "subject": "【lab4】proc_run中的中断开闭问题"}]}, "error": null}