{"aid": "iok671alhr84t7", "result": {"folders": ["lecture17"], "unique_views": 51, "no_answer": 0, "change_log": [{"data": "ioh2cls499u5nq", "anon": "no", "when": "2016-05-21T11:20:02Z", "uid": "i0f24oie8102cr", "type": "create"}, {"data": "ioh2fnuk6r35u9", "anon": "no", "when": "2016-05-21T11:22:24Z", "uid": "i0f24oie8102cr", "type": "update"}, {"data": "ioh2gvzc18oe7", "anon": "no", "when": "2016-05-21T11:23:21Z", "uid": "i0f24oie8102cr", "type": "update"}, {"uid": "hcrrjuyequh4bt", "data": "ioh7nijfbl0309", "when": "2016-05-21T13:48:29Z", "to": "ioh2cls0e5b5np", "anon": "no", "type": "i_answer"}, {"to": "ioh2cls0e5b5np", "anon": "no", "when": "2016-05-21T14:00:19Z", "uid": "i0f24oie8102cr", "type": "followup"}, {"to": "ioh2cls0e5b5np", "anon": "no", "when": "2016-05-22T08:48:46Z", "uid": "hdjonbiyfs62ie", "type": "feedback"}, {"data": "ioio95poz2q76w", "anon": "no", "when": "2016-05-22T14:20:59Z", "uid": "hs2swpdtr91gu", "type": "update"}, {"data": "ioio9zh8kfv7c3", "anon": "no", "when": "2016-05-22T14:21:37Z", "uid": "hs2swpdtr91gu", "type": "update"}, {"to": "ioh2cls0e5b5np", "anon": "no", "when": "2016-05-23T12:24:16Z", "uid": "i0zaci5voig5h", "type": "feedback"}], "upvote_ids": [], "id": "ioh2cls0e5b5np", "bookmarked": 7, "no_answer_followup": 1, "i_edits": [], "is_bookmarked": false, "children": [{"folders": [], "is_tag_endorse": false, "created": "2016-05-21T13:48:29Z", "config": {}, "tag_endorse_arr": [], "children": [], "bucket_name": "Today", "type": "i_answer", "tag_endorse": [], "bucket_order": 2, "data": {"embed_links": []}, "id": "ioh7nijc58z308", "history": [{"content": "<p>Bakery Algorithm&#xff1f;</p>", "anon": "no", "subject": "", "uid": "hcrrjuyequh4bt", "created": "2016-05-21T13:48:29Z"}]}, {"folders": [], "updated": "2016-05-21T14:00:19Z", "no_upvotes": 0, "uid": "i0f24oie8102cr", "created": "2016-05-21T14:00:19Z", "type": "followup", "no_answer": 1, "id": "ioh82qfzwmy5ux", "anon": "no", "bucket_name": "Last week", "config": {}, "bucket_order": 5, "data": null, "children": [{"folders": [], "updated": "2016-05-22T08:48:46Z", "uid": "hdjonbiyfs62ie", "created": "2016-05-22T08:48:46Z", "type": "feedback", "id": "ioicdxjxdw13c5", "anon": "no", "bucket_name": "Last week", "config": {}, "bucket_order": 5, "data": null, "children": [], "subject": "<p>你的测试代码仍然是随机的&#xff0c;不能通过你的测试确认算法的正确性。</p>\n<p></p>\n<p>我希望看到一组测试用例&#xff0c;枚举出所有可能情况&#xff0c;并验证进入区的代码在所有枚举的情况下都能没有错。有兴趣的同学可以试试。</p>"}, {"folders": [], "updated": "2016-05-23T12:24:16Z", "uid": "i0zaci5voig5h", "created": "2016-05-23T12:24:16Z", "type": "feedback", "id": "iojziwxqjtd69f", "anon": "no", "bucket_name": "Today", "config": {}, "bucket_order": 2, "data": null, "children": [], "subject": "<p>对于老师的问题&#xff0c;我有个想法&#xff08;但没时间实现&#xff09;</p>\n<p>首先我们考虑线程数量限制在很小的数量&#xff08;3或者4&#xff09;&#xff0c;然后考虑线程数量固定下的所有情况。</p>\n<p>我们考虑文中提到的每个变量每种可能的合法情况&#xff0c;以及每个线程现在执行到的代码位置情况</p>\n<p>然后把这些情况锁定为状态。</p>\n<p>换句话说&#xff0c;我们将每种可能的“现场状态”固定成一个节点&#xff0c;CPU每次执行任意一个线程的一句代码都可以认为是一条边&#xff0c;会将这个节点连向另一个节点</p>\n<p>只要证明&#xff0c;最后生成的所有状态的图中&#xff0c;没有从起始状态到“非法状态”&#xff08;比如两个线程同时进入临界区&#xff09;的有向路径&#xff0c;那么算法就是正确的</p>\n<p>这里面实现有两个难点&#xff1a;</p>\n<p>1&#xff0c;如何将每一个现场状态表示成一个节点&#xff08;或者说翻译成数字&#xff09;。</p>\n<p>2&#xff0c;怎样分割算法代码保证每一句话是原子操作&#xff08;即保证分割之后的每一步在CPU调度中一定是一次调度之后就必须要做完&#xff09;</p>\n<p></p>\n<p>之前我尝试过用“爆搜”的方法去实现&#xff0c;但是我发现&#xff0c;上述的图中会存在很多环&#xff0c;即如果让CPU随意调度的话很可能出现一直在一个合法的环上运行导致程序无法完全结束。所以我觉得上面说的形成映射图的方法可能更安全更直观</p>"}], "subject": "<p>并不是面包店算法&#xff0c;名字应该就叫这个吧</p>"}], "request_instructor_me": false, "nr": 881, "bucket_order": 2, "config": {}, "status": "active", "tags": ["lecture17", "student"], "num_favorites": 0, "bucket_name": "Today", "q_edits": [], "data": {"embed_links": []}, "request_instructor": 0, "created": "2016-05-21T11:20:02Z", "is_tag_good": false, "type": "question", "s_edits": [], "my_favorite": false, "default_anonymity": "no", "t": 1464017459277, "tag_good": [{"admin_permission": 10, "admin": true, "photo": "1378950179_35.png", "us": false, "email": "yuchen@mail.tsinghua.edu.cn", "class_sections": ["课程设计_i5j09fnsl7k5x0", "清华学生_i5j09fnsl7k5x0", "所有老师和助教_i5j09fnsl7k5x0"], "role": "instructor", "facebook_id": null, "id": "hcrrjuyequh4bt", "name": "Yu Chen"}, {"name": "Liu Xiaohong", "admin": false, "photo": null, "us": false, "email": "lxhlxhlxh555@gmail.com", "class_sections": ["清华学生_i5j09fnsl7k5x0"], "role": "student", "facebook_id": null, "id": "i0ccfx63sir1e"}, {"name": "张明瑞 2013011391", "admin": false, "photo": "1421470584_35.png", "us": false, "email": "zhangmr13@mails.tsinghua.edu.cn", "class_sections": ["清华学生_i5j09fnsl7k5x0"], "role": "student", "facebook_id": null, "id": "i0b2fq3ezjw50r"}], "tag_good_arr": ["hcrrjuyequh4bt", "i0ccfx63sir1e", "i0b2fq3ezjw50r"], "history": [{"content": "<p>由于课件上并没有Eisenberg的详细描述&#xff0c;我相信大家肯定想看精炼的步骤而不是冗长的文献&#xff0c;所以我在此整理Eisenberg算法。</p>\n<p></p>\n<p>这个算法是将n个进程形成一个圈&#xff0c;依照这个圈的顺序来分发资源。</p>\n<p></p>\n<p>首先这个算法需要维护这样的数据结构&#xff1a;</p>\n<p>shared enum states {IDLE, WAITING, ACTIVE} flags[n];</p>\n<p>shared int turn;</p>\n<p>int index;        /* not shared! */</p>\n<p></p>\n<p>其中&#xff0c;flags[i]=IDLE&#xff1a;进程Pi不想进入临界区&#xff1b;</p>\n<p>flags[i]=WAITING&#xff1a;进程Pi想进入临界区&#xff1b;</p>\n<p>flags[i]=ACTIVE&#xff1a;进程想进或已进临界区。</p>\n<p>flags的所有元素初值都是IDLE&#xff1b;</p>\n<p>turn的初值为0到n-1之间的任一正整数&#xff0c;它表示允许进入临界区的进程编号&#xff1b;</p>\n<p>index为每个进程拥有的一个局部变量&#xff0c;其初值为0到n-1之间的任一正整数。</p>\n<p></p>\n<p>首先我给出一个<strong>描述</strong>&#xff1a;</p>\n<pre>我们考虑第i个进程&#xff1a;\nturn是一个关键的变量&#xff0c;它决定谁现在能进入临界区。有2种情况&#xff1a;\n1.turn是一个随机的值&#xff0c;此时没有任何人申请资源\n2.turn是某个申请资源的进程的编号\n\n我们要验证turn到底处于哪一种情况&#xff0c;如果是第一种情况&#xff0c;那么即使turn≠i&#xff0c;我们也可以进入临界区&#xff0c;如果是第二种情况&#xff0c;那么我们得等到turn号进程执行完成。\n\n第零步&#xff0c;初始状态&#xff0c;申请之后&#xff0c;还处于IDLE状态\n\n第一步&#xff0c;进入WAITING状态&#xff0c;并检查[turn,i)区间内有没有申请资源的进程&#xff0c;有则等待它们执行完毕&#xff0c;没有则进入第二步\n\n第二步&#xff0c;进入ACTIVE状态&#xff0c;并试图寻找一个其它的处于ACTIVE状态的进程&#xff0c;如果没找到&#xff0c;则获得资源的控制权&#xff0c;如果找到了&#xff0c;则回到WAITING状态\n\n为何能解决同步互斥问题&#xff1f;\n首先有一个序&#xff0c;从turn开始&#xff0c;越前面的进程越优先获得资源。\n其次&#xff0c;如果执行到一半&#xff0c;突然有序号在自己之前的进程申请资源&#xff0c;自己会放弃资源的申请&#xff0c;等待序号靠前的</pre>\n<p></p>\n<p>由于同步互斥的<strong>代码</strong>每一行都有其深意&#xff0c;我觉得光是描述并不足以实现同步互斥的功能。所以给出一份不错的代码。</p>\n<p></p>\n<p><a href=\"https://github.com/Yangxc13/v9-cpu/blob/master/07-1-spoc-discussion/report.md\" target=\"_blank\">详细代码</a></p>\n<p></p>", "anon": "no", "subject": "Eisenberg算法", "uid": "hs2swpdtr91gu", "created": "2016-05-22T14:21:37Z"}, {"content": "<p>由于课件上并没有Eisenberg的详细描述&#xff0c;我相信大家肯定想看精炼的步骤而不是冗长的文献&#xff0c;所以我在此整理Eisenberg算法。</p>\n<p></p>\n<p>这个算法是将n个进程形成一个圈&#xff0c;依照这个圈的顺序来分发资源。</p>\n<p></p>\n<p>首先这个算法需要维护这样的数据结构&#xff1a;</p>\n<p>shared enum states {IDLE, WAITING, ACTIVE} flags[n];</p>\n<p>shared int turn;</p>\n<p>int index;        /* not shared! */</p>\n<p></p>\n<p>其中&#xff0c;flags[i]=IDLE&#xff1a;进程Pi不想进入临界区&#xff1b;</p>\n<p>flags[i]=WAITING&#xff1a;进程Pi想进入临界区&#xff1b;</p>\n<p>flags[i]=ACTIVE&#xff1a;进程想进或已进临界区。</p>\n<p>flags的所有元素初值都是IDLE&#xff1b;</p>\n<p>turn的初值为0到n-1之间的任一正整数&#xff0c;它表示允许进入临界区的进程编号&#xff1b;</p>\n<p>index为每个进程拥有的一个局部变量&#xff0c;其初值为0到n-1之间的任一正整数。</p>\n<p></p>\n<p>首先我给出一个<strong>描述</strong>&#xff1a;</p>\n<pre>我们考虑第i个进程&#xff1a;\nturn是一个关键的变量&#xff0c;它决定谁现在能进入临界区。有2种情况&#xff1a;\n1.turn是一个随机的值&#xff0c;此时没有任何人申请资源\n2.turn是某个申请资源的进程的编号\n\n我们要验证turn到底处于哪一种情况&#xff0c;如果是第一种情况&#xff0c;那么即使turn≠i&#xff0c;我们也可以进入临界区&#xff0c;如果是第二种情况&#xff0c;那么我们得等到turn号进程执行完成。\n\n第零步&#xff0c;初始状态&#xff0c;申请之后&#xff0c;还处于IDLE状态\n\n第一步&#xff0c;进入WAITING状态&#xff0c;并检查[turn,i)区间内有没有申请资源的进程&#xff0c;有则等待它们执行完毕&#xff0c;没有则进入第二步\n\n第二步&#xff0c;进入ACTIVE状态&#xff0c;并试图寻找一个其它的处于ACTIVE状态的进程&#xff0c;如果没找到&#xff0c;则获得资源的控制权&#xff0c;如果找到了&#xff0c;则回到WAITING状态\n\n为何能解决同步互斥问题&#xff1f;\n首先有一个序&#xff0c;从turn开始&#xff0c;越前面的进程越优先获得资源。\n其次&#xff0c;如果执行到一半&#xff0c;突然有序号在自己之前的进程申请资源&#xff0c;自己会放弃资源的申请&#xff0c;等待序号靠前的</pre>\n<p></p>\n<p>由于同步互斥的<strong>代码</strong>每一行都有其深意&#xff0c;我觉得光是描述并不足以实现同步互斥的功能。所以给出一份不错的代码。</p>\n<p></p>\n<p><a href=\"https://github.com/Yangxc13/v9-cpu/blob/master/07-1-spoc-discussion/report.md\" target=\"_blank\">详细代码</a></p>\n<p></p>", "anon": "no", "subject": "Eisenberg算法", "uid": "hs2swpdtr91gu", "created": "2016-05-22T14:20:59Z"}, {"content": "<p>由于课件上并没有Eisenberg的详细描述&#xff0c;我相信大家肯定想看精炼的步骤而不是冗长的文献&#xff0c;所以我在此整理Eisenberg算法。</p>\n<p></p>\n<p>这个算法是将n个进程形成一个圈&#xff0c;依照这个圈的顺序来分发资源。</p>\n<p></p>\n<p>首先这个算法需要维护这样的数据结构&#xff1a;</p>\n<p>shared enum states {IDLE, WAITING, ACTIVE} flags[n];</p>\n<p>shared int turn;</p>\n<p>int index;        /* not shared! */</p>\n<p></p>\n<p>其中&#xff0c;flags[i]=IDLE&#xff1a;进程Pi不想进入临界区&#xff1b;</p>\n<p>flags[i]=WAITING&#xff1a;进程Pi想进入临界区&#xff1b;</p>\n<p>flags[i]=ACTIVE&#xff1a;进程想进或已进临界区。</p>\n<p>flags的所有元素初值都是IDLE&#xff1b;</p>\n<p>turn的初值为0到n-1之间的任一正整数&#xff0c;它表示允许进入临界区的进程编号&#xff1b;</p>\n<p>index为每个进程拥有的一个局部变量&#xff0c;其初值为0到n-1之间的任一正整数。</p>\n<p></p>\n<p>首先我给出一个<strong>描述</strong>&#xff1a;</p>\n<pre>我们考虑第i个进程&#xff1a;\nturn是一个关键的变量&#xff0c;它决定谁现在能进入临界区。有2种情况&#xff1a;\n1.turn是一个随机的值&#xff0c;此时没有任何人申请资源\n2.turn是某个申请资源的进程的编号\n\n我们要验证turn到底处于哪一种情况&#xff0c;如果是第一种情况&#xff0c;那么即使turn≠i&#xff0c;我们也可以进入临界区&#xff0c;如果是第二种情况&#xff0c;那么我们得等到turn号进程执行完成。\n\n第零步&#xff0c;初始状态&#xff0c;申请之后&#xff0c;还处于IDLE状态\n\n第一步&#xff0c;进入WAITING状态&#xff0c;并检查[turn,i)区间内有没有申请资源的进程&#xff0c;有则等待它们执行完毕&#xff0c;没有则进入第二步\n\n第二步&#xff0c;进入ACTIVE状态&#xff0c;并试图寻找一个其它的处于ACTIVE状态的进程&#xff0c;如果没找到&#xff0c;则获得资源的控制权&#xff0c;如果找到了&#xff0c;则回到WAITING状态\n\n为何能解决同步互斥问题&#xff1f;\n首先有一个序&#xff0c;从turn开始&#xff0c;越前面的进程越优先获得资源。\n其次&#xff0c;如果执行到一半&#xff0c;突然有序号在自己之前的进程申请资源&#xff0c;自己会放弃资源的申请&#xff0c;等待序号靠前的</pre>\n<p></p>\n<p>由于同步互斥的<strong>代码</strong>每一行都有其深意&#xff0c;我觉得光是描述并不足以实现同步互斥的功能。所以给出一份不错的代码。</p>\n<p></p>\n<p><a href=\"https://github.com/Yangxc13/v9-cpu/blob/master/07-1-spoc-discussion/report.md\" target=\"_blank\">详细代码</a></p>\n<p></p>", "anon": "no", "subject": "Eisenberg算法", "uid": "i0f24oie8102cr", "created": "2016-05-21T11:23:21Z"}, {"content": "<p>由于课件上并没有Eisenberg的详细描述&#xff0c;我相信大家肯定想看精炼的步骤而不是冗长的文献&#xff0c;所以我在此整理Eisenberg算法。</p>\n<p></p>\n<p>这个算法是将n个进程形成一个圈&#xff0c;依照这个圈的顺序来分发资源。</p>\n<p></p>\n<p>首先这个算法需要维护这样的数据结构&#xff1a;</p>\n<p>shared enum states {IDLE, WAITING, ACTIVE} flags[n];</p>\n<p>shared int turn;</p>\n<p>int index;        /* not shared! */</p>\n<p></p>\n<p>其中&#xff0c;flags[i]=IDLE&#xff1a;进程Pi不想进入临界区&#xff1b;</p>\n<p>flags[i]=WAITING&#xff1a;进程Pi想进入临界区&#xff1b;</p>\n<p>flags[i]=ACTIVE&#xff1a;进程想进或已进临界区。</p>\n<p>flags的所有元素初值都是IDLE&#xff1b;</p>\n<p>turn的初值为0到n-1之间的任一正整数&#xff0c;它表示允许进入临界区的进程编号&#xff1b;</p>\n<p>index为每个进程拥有的一个局部变量&#xff0c;其初值为0到n-1之间的任一正整数。</p>\n<p></p>\n<p>首先我给出一个<strong>描述</strong>&#xff1a;</p>\n<pre>我们考虑第i个进程&#xff1a;\nturn是一个关键的变量&#xff0c;它决定谁现在能进入临界区。有2种情况&#xff1a;\n1.turn是一个随机的值&#xff0c;此时没有任何人申请资源\n2.turn是某个申请资源的进程的编号\n\n我们要验证turn到底处于哪一种情况&#xff0c;如果是第一种情况&#xff0c;那么即使turn≠i&#xff0c;我们也可以进入临界区&#xff0c;如果是第二种情况&#xff0c;那么我们得等到turn号进程执行完成。\n\n第零步&#xff0c;初始状态&#xff0c;申请之后&#xff0c;处于IDLE状态\n\n第一步&#xff0c;进入WAITING状态&#xff0c;并检查[turn,i)区间内有没有申请资源的进程&#xff0c;有则等待它们执行完毕&#xff0c;没有则进入第二步\n\n第二步&#xff0c;进入ACTIVE状态&#xff0c;并试图寻找一个其它的处于ACTIVE状态的进程&#xff0c;如果没找到&#xff0c;则获得资源的控制权&#xff0c;如果找到了&#xff0c;则回到WAITING状态\n\n为何能解决同步互斥问题&#xff1f;\n首先有一个序&#xff0c;从turn开始&#xff0c;越前面的进程越优先获得资源。\n其次&#xff0c;如果执行到一半&#xff0c;突然有序号在自己之前的进程申请资源&#xff0c;自己会放弃资源的申请&#xff0c;等待序号靠前的</pre>\n<p></p>\n<p>由于同步互斥的<strong>代码</strong>每一行都有其深意&#xff0c;我觉得光是描述并不足以实现同步互斥的功能。所以给出一份不错的代码。</p>\n<p></p>\n<p><a href=\"https://github.com/Yangxc13/v9-cpu/blob/master/07-1-spoc-discussion/report.md\" target=\"_blank\">详细代码</a></p>\n<p></p>", "anon": "no", "subject": "Eisenberg算法", "uid": "i0f24oie8102cr", "created": "2016-05-21T11:22:24Z"}, {"content": "<p>由于课件上并没有Eisenberg的详细描述&#xff0c;我相信大家肯定想看精炼的步骤而不是冗长的文献&#xff0c;所以我在此整理Eisenberg算法。</p>\n<p></p>\n<p>这个算法是将n个进程形成一个圈&#xff0c;依照这个圈的顺序来分发资源。</p>\n<p></p>\n<p>首先这个算法需要维护这样的数据结构&#xff1a;</p>\n<p>shared enum states {IDLE, WAITING, ACTIVE} flags[n];</p>\n<p>shared int turn;</p>\n<p>int index;        /* not shared! */</p>\n<p></p>\n<p>其中&#xff0c;flags[i]=IDLE&#xff1a;进程Pi不想进入临界区&#xff1b;</p>\n<p>flags[i]=WAITING&#xff1a;进程Pi想进入临界区&#xff1b;</p>\n<p>flags[i]=ACTIVE&#xff1a;进程想进或已进临界区。</p>\n<p>flags的所有元素初值都是IDLE&#xff1b;</p>\n<p>turn的初值为0到n-1之间的任一正整数&#xff0c;它表示允许进入临界区的进程编号&#xff1b;</p>\n<p>index为每个进程拥有的一个局部变量&#xff0c;其初值为0到n-1之间的任一正整数。</p>\n<p></p>\n<p>首先我给出一个<strong>描述</strong>&#xff1a;</p>\n<pre>我们考虑第i个进程&#xff1a;<br />turn是一个关键的变量&#xff0c;它决定谁现在能进入临界区。有2种情况&#xff1a;<br />1.turn是一个随机的值&#xff0c;此时没有任何人申请资源<br />2.turn是某个申请资源的进程的编号<br /><br />我们要验证turn到底处于哪一种情况&#xff0c;如果是第一种情况&#xff0c;那么即使turn≠i&#xff0c;我们也可以进入临界区&#xff0c;如果是第二种情况&#xff0c;那么我们得等到turn号进程执行完成。<br /><br />第零步&#xff0c;<strong>初始状态</strong>&#xff0c;申请之后&#xff0c;处于IDLE状态<br /><br />第一步&#xff0c;进入<strong>WAITING状态</strong>&#xff0c;并检查[turn,i)区间内有没有申请资源的进程&#xff0c;有则等待它们执行完毕&#xff0c;没有则进入第二步<br /><br />第二步&#xff0c;进入<strong>ACTIVE状态</strong>&#xff0c;并试图寻找一个其它的处于ACTIVE状态的进程&#xff0c;如果没找到&#xff0c;则获得资源的控制权&#xff0c;如果找到了&#xff0c;则回到<strong>WAITING状态<br /></strong><br />为何能解决同步互斥问题&#xff1f;<br />首先有一个序&#xff0c;从turn开始&#xff0c;越前面的进程越优先获得资源。<br />其次&#xff0c;如果执行到一半&#xff0c;突然有序号在自己之前的进程申请资源&#xff0c;自己会放弃资源的申请&#xff0c;等待序号靠前的</pre>\n<p></p>\n<p>由于同步互斥的<strong>代码</strong>每一行都有其深意&#xff0c;我觉得光是描述并不足以实现同步互斥的功能。所以给出一份不错的代码。</p>\n<p></p>\n<p><a href=\"https://github.com/Yangxc13/v9-cpu/blob/master/07-1-spoc-discussion/report.md\" target=\"_blank\">详细代码</a></p>\n<p></p>", "anon": "no", "subject": "Eisenberg算法", "uid": "i0f24oie8102cr", "created": "2016-05-21T11:20:02Z"}]}, "error": null}