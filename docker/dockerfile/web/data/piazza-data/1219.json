{"aid": "jgxahs4irr918h", "result": {"status": "active", "unique_views": 6, "request_instructor_me": false, "change_log": [{"type": "create", "anon": "no", "when": "2018-05-08T01:53:26Z", "data": "jgx0tqq5uxy4ji", "uid": "it2wrxu13f13sy"}, {"to": "jgx0tqq1qb24jh", "anon": "no", "when": "2018-05-08T03:25:48Z", "type": "followup", "uid": "hdjonbiyfs62ie"}, {"to": "jgx0tqq1qb24jh", "anon": "no", "when": "2018-05-08T03:35:39Z", "type": "feedback", "uid": "it2wrxu13f13sy"}], "upvote_ids": [], "id": "jgx0tqq1qb24jh", "bookmarked": 2, "tags": ["2018", "lecture18", "student"], "i_edits": [], "is_bookmarked": false, "children": [{"folders": [], "updated": "2018-05-08T03:25:48Z", "no_upvotes": 0, "uid": "hdjonbiyfs62ie", "created": "2018-05-08T03:25:48Z", "type": "followup", "no_answer": 0, "id": "jgx44iuxuf06e", "anon": "no", "bucket_name": "Today", "config": {}, "bucket_order": 2, "data": null, "children": [{"folders": [], "updated": "2018-05-08T03:35:39Z", "uid": "it2wrxu13f13sy", "created": "2018-05-08T03:35:39Z", "type": "feedback", "id": "jgx4h6ncqng5se", "anon": "no", "bucket_name": "Today", "config": {}, "bucket_order": 2, "data": null, "children": [], "subject": "<p>感谢老师&#xff01;while和if的区别真是妙</p>"}], "subject": "<p>把P()中的if改while可以解决这个问题。但仍然有麻烦。这个麻烦就是我们的一个课堂练习。见下面链接中的练习3。</p>\n<p></p>\n<p>https://github.com/chyyuu/os_course_exercises/blob/2018spring/all/07-2-spoc-discussion.md#181-%E5%9F%BA%E6%9C%AC%E7%90%86%E8%A7%A3</p>"}], "nr": 1219, "bucket_order": 2, "type": "note", "folders": ["2018", "lecture18"], "no_answer_followup": 0, "num_favorites": 0, "bucket_name": "Today", "q_edits": [], "data": {"embed_links": []}, "request_instructor": 0, "created": "2018-05-08T01:53:26Z", "is_tag_good": false, "config": {}, "s_edits": [], "my_favorite": false, "default_anonymity": "no", "t": 1525760644770, "tag_good": [], "tag_good_arr": [], "history": [{"content": "<p>PPT上的PV操作&#xff1a;</p>\n<pre>classSemaphore {\n    int sem;\n    WaitQueue q;\n}<br /><br />Semaphore::P() {\n   sem--;\n   if (sem &lt; 0) {\n        Add this thread t to q;\n        block(p);\n     }\n}<br /><br />Semaphore::V() {\n    sem&#43;&#43;; \n    if (sem&lt;=0) {\n        Remove a thread t from q;\n        wakeup(t);        \n    }\n}</pre>\n<p></p>\n<p>在课堂上&#xff0c;陈渝老师提到&#xff0c;能否将程序修改为如下情形&#xff08;sem初始化是1&#xff09;&#xff1a;</p>\n<p></p>\n<pre>P(){ <br />    if (sem &lt;= 0) {<br />        q. enqueue(t);<br />        block(t);<br />    }<br />    sem--;<br />}<br /><br />V() {<br />    sem&#43;&#43;;<br />    if (!q.empty()) {<br />        t = q.dequeue();<br />        wakeup(t);<br />    }<br />}</pre>\n<p></p>\n<p>比如&#xff0c;一个例子&#xff1a;</p>\n<p>&#xff08;以下以Pn表示进程n执行P操作&#xff0c;Vn表示进程n执行V操作&#xff09;</p>\n<p>P1,sem=0,q=[]&#xff0c;1进入临界区</p>\n<p>P2,sem=0,q=[2]&#xff0c;2被阻塞&#xff0c;不能执行sem--</p>\n<p>V1,sem=1,q=[]&#xff0c;2被唤醒&#xff0c;接着2执行sem--&#xff0c;sem=0&#xff0c;并且2进入临界区。</p>\n<p></p>\n<p></p>\n<p>看似是没有问题的&#xff0c;但其实&#xff1a;</p>\n<p>P1,sem=0,q=[]&#xff0c;1进入临界区</p>\n<p>P2,sem=0,q=[2]&#xff0c;2被阻塞&#xff0c;不能执行sem--</p>\n<p>V1,sem=1,q=[]&#xff0c;2被唤醒&#xff0c;此时2处于就绪态&#xff0c;当进程调度时&#xff0c;如果没有马上调度2&#xff0c;比如调度了3&#xff0c;执行P3&#xff0c;3发现sem=1&#xff0c;于是直接跳到sem--并且进入临界区&#xff1b;而3在临界区的过程中&#xff0c;若发生进程切换&#xff0c;切到2时&#xff0c;2执行sem--&#xff0c;sem=-1&#xff0c;并且2也进入临界区。这就导致会有多个进程进入临界区的情况。因此这种做法是不可取的。</p>\n<p></p>\n<p></p>", "anon": "no", "created": "2018-05-08T01:53:26Z", "uid": "it2wrxu13f13sy", "subject": "信号量PV操作时&#xff0c;P操作的sem修改与sem条件判断的顺序不能互换"}]}, "error": null}