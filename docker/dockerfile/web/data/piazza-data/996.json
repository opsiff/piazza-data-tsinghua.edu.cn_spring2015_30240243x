{"aid": "izveo02uk62xh", "result": {"status": "active", "unique_views": 20, "request_instructor_me": false, "change_log": [{"type": "create", "anon": "no", "when": "2017-03-03T07:06:16Z", "data": "izth7wnb7kl24c", "uid": "ie7xxyhe7dp1jr"}, {"type": "update", "anon": "no", "when": "2017-03-04T13:14:08Z", "data": "izv9stqbu5125q", "uid": "hdjonbiyfs62ie"}], "upvote_ids": [], "id": "izth7wna2ho24b", "bookmarked": 5, "no_answer": 1, "i_edits": [], "is_bookmarked": false, "children": [], "nr": 996, "bucket_order": 2, "type": "question", "folders": ["lab1", "2017"], "no_answer_followup": 0, "num_favorites": 0, "bucket_name": "Today", "q_edits": [], "data": {"embed_links": []}, "request_instructor": 0, "tags": ["2017", "lab1", "student", "unanswered"], "created": "2017-03-03T07:06:16Z", "is_tag_good": false, "config": {}, "s_edits": [], "my_favorite": false, "default_anonymity": "no", "t": 1488641421414, "tag_good": [], "tag_good_arr": [], "history": [{"content": "<p>/kern/debug/kdebug.c: line 336</p>\n<p></p>\n<pre>void\nprint_stackframe(void);</pre>\n<p></p>\n<p>Key: 符号表</p>\n<p></p>\n<p>获取运行时函数调用栈和调用参数信息的用途在于&#xff0c;方便跟踪和分析系统执行的状态情况&#xff0c;用于分析和定位可能的程序错误。</p>\n<p></p>\n<p>这个问题可以分成两步来解决&#xff0c;先获取简单类型参数的值&#xff0c;然后再解决数据解析需要的类型信息。</p>\n<p></p>\n<p>有兴趣的同学可以一试。希望看到同学们的不断优化的回复。</p>", "anon": "no", "created": "2017-03-04T13:14:08Z", "uid": "hdjonbiyfs62ie", "subject": "在 print_stackframe() 中如何打印出被调用函数的参数列表和运行时的值 - 向老师课堂 2017-3-3 遗留问题"}, {"content": "<p>/kern/debug/kdebug.c: line 336</p>\n<p></p>\n<pre>void\nprint_stackframe(void);</pre>\n<p></p>\n<p>Key: 符号表</p>", "anon": "no", "created": "2017-03-03T07:06:16Z", "uid": "ie7xxyhe7dp1jr", "subject": "在 print_stackframe() 中如何打印出被调用函数的参数列表和运行时的值 - 向老师课堂 2017-3-3 遗留问题"}]}, "error": null}