{"aid": "igkpyha93nv437", "error": null, "result": {"default_anonymity": "no", "status": "active", "i_edits": [], "q_edits": [], "bookmarked": 3, "request_instructor": 0, "history": [{"uid": "i6rtbanwzcm5t6", "anon": "no", "created": "2015-05-16T12:12:38Z", "content": "<p>在18讲第3小节视频14:50秒处&#xff0c;讲到Hansen管程和Hoare管程在实现上的具体区别&#xff0c;是wait()放在while循环里还是if语句里&#xff0c;前者在进程被唤醒后还会继续判断while循环的条件&#xff0c;即count==n是否成立&#xff0c;这一条件可以抽象地认为是资源是否可用&#xff0c;但是我的理解是如果notFull使用signal()方法唤醒了等待队列里的一个进程&#xff0c;必然是在资源被释放、可以使用之后&#xff0c;那么可以认为资源是一定可用的&#xff0c;既然如此&#xff0c;while循环再判断一次资源是否可用又有什么意义&#xff1f;</p>\n<p></p>\n<p>简单来说&#xff0c;我的问题是&#xff0c;如何通过while和if分别实现两种管程的&#xff1f;我的疑惑在于唤醒之前wait的进程后&#xff0c;while循环的条件应该是不成立、会退出循环的&#xff0c;这不就跟使用if实现是相同的了吗&#xff0c;那又如何区别的&#xff1f;</p>\n<p></p>", "subject": "信号量与管程中while与if实现的区别"}], "s_edits": [], "is_bookmarked": false, "tag_good_arr": ["i6rtbanwzcm5t6"], "request_instructor_me": false, "my_favorite": false, "t": 1446636393729, "children": [{"is_tag_endorse": false, "created": "2015-05-16T14:15:41Z", "id": "i9r49h22j0l1og", "tag_endorse": [], "folders": [], "history": [{"uid": "hxu22d7okof4c1", "anon": "no", "created": "2015-05-16T14:20:29Z", "content": "<p>Hansen管程在signal之后&#xff0c;只是把一个等待队列里的进程&#xff08;不妨称为进程A&#xff09;放进了就绪队列里&#xff0c;并没有立即调度。如果就绪队列里有多个进程准备修改count&#xff0c;不能保证进程调度时下一个运行的进程就是进程A&#xff0c;可能被其它进程修改了count之后才轮到A执行&#xff0c;所以要重新判断count==n。</p>\n<p></p>\n<p>Hoare管程在signal函数里面&#xff0c;把一个等待队列里的进程取出来立即运行。因为刚执行过count--&#xff0c;所以count==n一定是不成立的。</p>\n<p>我猜Hoare signal函数具体实现应该是&#xff1a;先release lock&#xff0c;然后wake_up t&#xff0c;最后require lock&#xff08;目的是让外界感知不到lock的变化&#xff09;。</p>", "subject": ""}, {"uid": "hxu22d7okof4c1", "anon": "no", "created": "2015-05-16T14:16:57Z", "content": "<p>Hansen管程在signal之后&#xff0c;只是把一个等待队列里的进程&#xff08;不妨称为进程A&#xff09;放进了就绪队列里&#xff0c;并没有立即调度。如果就绪队列里有多个进程准备修改count&#xff0c;不能保证进程调度时下一个运行的进程就是进程A&#xff0c;可能被其它进程修改了count之后才轮到A执行&#xff0c;所以要重新判断count==n。</p>\n<p></p>\n<p>Hoare管程在signal之后&#xff0c;把一个等待队列里的进程取出来立即运行。因为刚执行过count--&#xff0c;所以count==n一定是不成立的。</p>", "subject": ""}, {"uid": "hxu22d7okof4c1", "anon": "no", "created": "2015-05-16T14:16:07Z", "content": "<p>Hansen管程在signal之后&#xff0c;只是把一个等待队列里的进程&#xff08;不妨称为进程A&#xff09;放进了就绪队列里&#xff0c;并没有立即调度。如果就绪队列里有多个进程准备修改count&#xff0c;不能保证进程调度时下一个运行的进程就是进程A&#xff0c;可能被其它进程修改了count之后才轮到A执行&#xff0c;所以要重新判断count==n</p>\n<p></p>\n<p>Hoare管程在sinalg之后&#xff0c;把一个等待队列里的进程取出来立即运行。因为刚执行过count--&#xff0c;所以count==n一定是不成立的。</p>", "subject": ""}, {"uid": "hxu22d7okof4c1", "anon": "no", "created": "2015-05-16T14:15:41Z", "content": "<p>Hansen管程在signal之后&#xff0c;只是把一个等待队列里的进程&#xff08;不妨称为进程A&#xff09;放进了就绪队列里&#xff0c;并没有立即调度。如果就绪队列里有多个进程准备修改count&#xff0c;不能保证进程调度时下一个运行的进程就是进程A&#xff0c;可能被其它进程修改了count之后才轮到A执行&#xff0c;所以要重新判断count==n</p>\n<p></p>\n<p>Hoare管程在sinalg之后&#xff0c;把一个等待队列里的进程&#xff08;不妨称为进程B&#xff09;取出来立即运行。因为刚执行过count--&#xff0c;所以count==n一定是不成立的。</p>", "subject": ""}], "config": {}, "data": {"embed_links": []}, "bucket_order": 2, "bucket_name": "Today", "tag_endorse_arr": [], "children": [], "type": "s_answer"}, {"uid": "i6rtbanwzcm5t6", "no_answer": 0, "created": "2015-05-16T15:48:16Z", "id": "i9r7kj187xx5zo", "updated": "2015-05-16T15:48:16Z", "subject": "<p>&#64;袁泰凌&#xff0c;你说的Hansen管程的实现细节我理解了&#xff0c;比较赞同&#xff0c;多谢&#xff5e;</p>\n<p></p>\n<p>对于Hoare管程&#xff0c;事实上&#xff0c;lab7的实现就是Hoare管程&#xff0c;signal里会</p>\n<pre>up(&amp;cvp-&gt;sem);\ndown(&amp;mtp-&gt;next);</pre>\n<p>而down里会有schedule()&#xff0c;所以lab7的signal()会立刻运行等待队列的线程&#xff0c;在这种情况下&#xff0c;check_sync.c中的phi_take_forks_condvar()函数里&#xff0c;使用if和使用while是没有区别的&#xff0c;两者的输出见&#xff1a;&#xff08;经过diff&#xff0c;除了运行时分配的物理地址不同导致的差异外没有事实上的差异&#xff09;</p>\n<p><a href=\"https://github.com/dc3671/ucore_lab/blob/master/labcodes/lab7/lab7_if\">https://github.com/dc3671/ucore_lab/blob/master/labcodes/lab7/lab7_if</a></p>\n<p><a href=\"https://github.com/dc3671/ucore_lab/blob/master/labcodes/lab7/lab7_while\">https://github.com/dc3671/ucore_lab/blob/master/labcodes/lab7/lab7_while</a></p>\n<pre>if (state_condvar[i] != EATING) {\n    cprintf(&#34;phi_take_forks_condvar: phi %d wait for forks\\n&#34;,i);\n    cond_wait(&amp;mtp-&gt;cv[i]);\n}</pre>\n<p></p>", "anon": "no", "folders": [], "config": {}, "data": {"embed_links": null}, "bucket_order": 2, "bucket_name": "Today", "no_upvotes": 0, "children": [], "type": "followup"}], "type": "question", "unique_views": 61, "created": "2015-05-16T12:12:38Z", "id": "i9qzv81i10f3w0", "no_answer": 0, "nr": 431, "data": {"embed_links": []}, "upvote_ids": [], "is_tag_good": false, "config": {}, "folders": ["lab7"], "bucket_order": 2, "change_log": [{"uid": "i6rtbanwzcm5t6", "when": "2015-05-16T12:12:38Z", "data": "i9qzv81lstn3w1", "anon": "no", "type": "create"}, {"uid": "hxu22d7okof4c1", "when": "2015-05-16T14:15:42Z", "data": "i9r49h27imr1oh", "to": "i9qzv81i10f3w0", "anon": "no", "type": "s_answer"}, {"uid": "hxu22d7okof4c1", "when": "2015-05-16T14:16:07Z", "data": "i9r4a0f4roe1qz", "anon": "no", "type": "s_answer_update"}, {"uid": "hxu22d7okof4c1", "when": "2015-05-16T14:16:57Z", "data": "i9r4b3bhbcw1vp", "anon": "no", "type": "s_answer_update"}, {"uid": "hxu22d7okof4c1", "when": "2015-05-16T14:20:29Z", "data": "i9r4fmwpli12cs", "anon": "no", "type": "s_answer_update"}, {"uid": "i6rtbanwzcm5t6", "when": "2015-05-16T15:48:16Z", "to": "i9qzv81i10f3w0", "anon": "no", "type": "followup"}], "bucket_name": "Today", "tags": ["lab7", "student"], "no_answer_followup": 0, "num_favorites": 1, "tag_good": [{"class_sections": ["清华学生_i5j09fnsl7k5x0"], "name": "陈振寰", "id": "i6rtbanwzcm5t6", "role": "student", "facebook_id": null, "photo": "1425297841_35.png", "admin": false, "us": false}]}}