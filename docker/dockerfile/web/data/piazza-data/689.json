{"aid": "j1z51imvpo63pp", "result": {"status": "active", "unique_views": 120, "request_instructor_me": false, "change_log": [{"data": "ilr9nuricxg5ot", "anon": "no", "when": "2016-03-14T00:43:19Z", "uid": "i0nuu5yhgno5tv", "type": "create"}, {"data": "ilsv5mx8jsh6y3", "anon": "no", "when": "2016-03-15T03:32:46Z", "uid": "i0nuu5yhgno5tv", "type": "update"}, {"uid": "hcrrjuyequh4bt", "data": "im1dh2gw2ou69o", "when": "2016-03-21T02:27:42Z", "to": "ilr9nurfraf5os", "anon": "no", "type": "i_answer"}, {"to": "ilr9nurfraf5os", "anon": "no", "when": "2017-04-26T15:06:14Z", "type": "followup", "uid": "ig9k1mbvxmr587"}], "upvote_ids": [], "id": "ilr9nurfraf5os", "bookmarked": 6, "no_answer": 0, "i_edits": [], "is_bookmarked": false, "children": [{"folders": [], "is_tag_endorse": false, "created": "2016-03-21T02:27:42Z", "type": "i_answer", "tag_endorse_arr": [], "id": "im1dh2gs2h369n", "bucket_name": "Today", "config": {}, "tag_endorse": [], "bucket_order": 2, "data": {"embed_links": []}, "children": [], "history": [{"content": "<p>你对“当lgdt了新的gdt以后&#xff0c;为什么加了偏移但是程序没有跑飞&#xff1f;”的理解是对的。注意&#xff0c;这里的jmp是 long jmp&#xff0c;这样保证了cpu一定会访问cs,从而触发使用新gdt表</p>", "anon": "no", "created": "2016-03-21T02:27:42Z", "uid": "hcrrjuyequh4bt", "subject": ""}]}, {"folders": [], "updated": "2017-04-26T15:06:14Z", "no_upvotes": 0, "uid": "ig9k1mbvxmr587", "created": "2017-04-26T15:06:14Z", "type": "followup", "no_answer": 0, "id": "j1z4558yxaaq", "anon": "no", "bucket_name": "Today", "config": {}, "bucket_order": 2, "data": null, "children": [], "subject": "<p>cs寄存器有两部分&#xff0c;一部分是段选择子&#xff0c;另一部分是base地址&#xff0c;访问代码时用的是base &#43; eip。执行ljmp之前&#xff0c;base不会改变。只有在执行ljmp时&#xff0c;才会根据更新的cs来更新base地址。所以不会跑飞</p>"}], "nr": 689, "bucket_order": 2, "type": "question", "folders": ["lecture7"], "no_answer_followup": 0, "num_favorites": 0, "bucket_name": "Today", "q_edits": [], "data": {"embed_links": []}, "request_instructor": 0, "tags": ["lecture7", "student"], "created": "2016-03-14T00:43:19Z", "is_tag_good": false, "config": {}, "s_edits": [], "my_favorite": false, "default_anonymity": "no", "t": 1493220685207, "tag_good": [{"name": "Yong XIANG", "admin": true, "photo": null, "us": false, "id": "hdjonbiyfs62ie", "class_sections": ["课程设计_i5j09fnsl7k5x0", "清华学生_i5j09fnsl7k5x0", "所有老师和助教_i5j09fnsl7k5x0"], "role": "instructor", "facebook_id": null, "email": "xyong@tsinghua.edu.cn", "admin_permission": 10}], "tag_good_arr": ["hdjonbiyfs62ie"], "history": [{"content": "<p>下课以后总结。</p>\n<p>第一步&#xff1a;在bootasm.s&#xff0c;从实模式的7c00&#xff08;也就是booloader&#xff09;开始&#xff0c;先切换到保护模式&#xff0c;然后bootloader装载ucore。这里保护模式的段是对等映射。</p>\n<p>第二步&#xff1a;在bootmain里面可以看到如下代码。这里p_va是代码的链接时候的虚拟地址相当于&#xff0c;开头是C0100000&#xff0c;&amp;上0xFFFFFF以后就是物理地址的0x00100000&#xff0c;这和bootloader的代码位置不重复&#xff0c;在也是为什么后面切换段的时候&#xff0c;地址转换会加上一个C0000000的原因。</p>\n<pre>readseg(ph-&gt;p_va &amp; 0xFFFFFF, ph-&gt;p_memsz, ph-&gt;p_offset);</pre>\n<p>第三步&#xff1a;跳转到entry.S中&#xff0c;这里重新lgdt了&#xff0c;gdt的目录如下。</p>\n<pre>.align 4\n__gdt:\n    SEG_NULL\n    SEG_ASM(STA_X | STA_R, - KERNBASE, 0xFFFFFFFF)      # code segment\n    SEG_ASM(STA_W, - KERNBASE, 0xFFFFFFFF)              # data segment\n__gdtdesc:\n    .word 0x17                                          # sizeof(__gdt) - 1\n    .long REALLOC(__gdt)</pre>\n<p>这里加入了偏移&#xff0c;然后接下来的格式就和mmu里面一样。</p>\n<p>这里有一个问题&#xff0c;当lgdt了新的gdt以后&#xff0c;为什么加了偏移但是程序没有跑飞。我现在的理解是&#xff0c;lgdt以后&#xff0c;没有立即使用新的gdt表进行cs的映射&#xff0c;只有当后面的语句ljmp以后&#xff0c;才使用了新gdt表。&#xff08;欢迎补充。。。这里有点搞不清楚&#xff09;</p>\n<pre>lgdt REALLOC(__gdtdesc)<br /> movl $KERNEL_DS, %eax<br /> movw %ax, %ds<br /> movw %ax, %es<br /> movw %ax, %ss<br />ljmp $KERNEL_CS, $relocated</pre>\n<p>第四步&#xff1a;</p>\n<p>等待更新。。。</p>", "anon": "no", "created": "2016-03-15T03:32:46Z", "uid": "i0nuu5yhgno5tv", "subject": "MMU工作原理&#xff08;课上提问&#xff09;"}, {"content": "<p>下课以后总结。</p>", "anon": "no", "created": "2016-03-14T00:43:19Z", "uid": "i0nuu5yhgno5tv", "subject": "MMU工作原理&#xff08;课上提问&#xff09;"}]}, "error": null}