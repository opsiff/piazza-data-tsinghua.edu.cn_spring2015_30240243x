{"aid": "jf99zh12r0q133", "result": {"status": "active", "unique_views": 118, "request_instructor_me": false, "change_log": [{"data": "i7w0lgieijd3yg", "anon": "no", "when": "2015-03-30T15:12:28Z", "uid": "hdjonbiyfs62ie", "type": "create"}, {"to": "i7w0lgibx873yf", "anon": "no", "when": "2015-03-30T15:50:54Z", "uid": "hrhsj9t1wSn", "type": "followup"}, {"uid": "hcrrjuyequh4bt", "data": "i7y79fbumuj2g5", "when": "2015-04-01T03:54:37Z", "to": "i7w0lgibx873yf", "anon": "no", "type": "i_answer"}, {"to": "i7w0lgibx873yf", "anon": "stud", "when": "2015-04-05T02:14:02Z", "uid": "i6t7bfshA1d", "type": "followup"}, {"to": "i7w0lgibx873yf", "anon": "no", "when": "2015-04-05T02:19:35Z", "uid": "hdjonbiyfs62ie", "type": "feedback"}, {"to": "i7w0lgibx873yf", "anon": "full", "when": "2015-04-08T07:01:49Z", "type": "feedback"}, {"to": "i7w0lgibx873yf", "anon": "no", "when": "2015-04-09T01:17:02Z", "uid": "hdjonbiyfs62ie", "type": "feedback"}, {"to": "i7w0lgibx873yf", "anon": "stud", "when": "2015-04-11T07:36:06Z", "uid": "i6t7bfshA1d", "type": "feedback"}, {"to": "i7w0lgibx873yf", "anon": "no", "when": "2015-04-11T14:55:27Z", "uid": "hdjonbiyfs62ie", "type": "feedback"}, {"to": "i7w0lgibx873yf", "anon": "no", "when": "2018-03-27T02:27:27Z", "type": "feedback", "uid": "it2wrxu13f13sy"}, {"to": "i7w0lgibx873yf", "anon": "no", "when": "2018-03-27T04:07:24Z", "type": "followup", "uid": "it2wrxu13f13sy"}], "upvote_ids": [], "id": "i7w0lgibx873yf", "bookmarked": 9, "no_answer": 0, "i_edits": [], "is_bookmarked": false, "children": [{"folders": [], "updated": "2015-03-30T15:50:54Z", "no_upvotes": 0, "uid": "hrhsj9t1wSn", "created": "2015-03-30T15:50:54Z", "type": "followup", "no_answer": 0, "id": "i7w1yvct1nzjs", "anon": "no", "bucket_name": "Week 3/29 - 4/4", "config": {}, "bucket_order": 161, "data": null, "children": [], "subject": "<p></p>"}, {"folders": [], "is_tag_endorse": false, "created": "2015-04-01T03:54:37Z", "type": "i_answer", "tag_endorse_arr": ["ie7xy513unw1q4"], "id": "i7y79fasipm2g4", "bucket_name": "Today", "config": {}, "tag_endorse": [{"name": "青枫14", "admin": false, "photo": null, "endorser": {}, "facebook_id": null, "us": false, "email": "zhangch14@mails.tsinghua.edu.cn", "role": "student", "published": true, "id": "ie7xy513unw1q4"}], "bucket_order": 2, "data": {"embed_links": []}, "children": [], "history": [{"content": "<p>此问题也许会再次在某个地方出现。:)</p>", "anon": "no", "created": "2015-04-01T03:54:37Z", "uid": "hcrrjuyequh4bt", "subject": ""}]}, {"folders": [], "updated": "2015-04-05T02:14:01Z", "no_upvotes": 0, "uid": "i6t7bfshA1d", "created": "2015-04-05T02:14:01Z", "type": "followup", "no_answer": 0, "id": "i83tfh8kx44po", "anon": "stud", "bucket_name": "Week 4/5 - 4/11", "config": {}, "bucket_order": 160, "data": null, "children": [{"folders": [], "updated": "2015-04-05T02:19:35Z", "uid": "hdjonbiyfs62ie", "created": "2015-04-05T02:19:35Z", "type": "feedback", "id": "i83tmmmanwz73i", "anon": "no", "bucket_name": "Week 4/5 - 4/11", "config": {}, "bucket_order": 160, "data": null, "children": [], "subject": "<p>很好的解决思路。</p>\n<p></p>\n<p>细节还需要确认一下。如果可能&#xff0c;请给出完整的算法处理过程描述。</p>"}, {"folders": [], "updated": "2015-04-08T07:01:49Z", "created": "2015-04-08T07:01:49Z", "type": "feedback", "id": "i88e158ii7621y", "anon": "full", "bucket_name": "Week 4/5 - 4/11", "config": {}, "bucket_order": 160, "data": null, "children": [], "subject": "<p>对题主的看法我有几点不认同&#xff1a;</p>\n<p>1)感觉clock不能退化为FIFO&#xff0c;但是没有证明出来</p>\n<p>2)并不是说算法退化为FIFO之后就会造成belady&#xff0c;LRU在一定序列下可以退化为FIFO&#xff0c;但是造成他退化的那种访问序列并不能产生belady异常&#xff0c;能让FIFO退化的序列特征应该是系统频繁访问刚被置换出去的页&#xff0c;与FIFO的置换思路不吻合所以导致belady</p>\n<p>3)我试了一下题主给出的测例&#xff0c;也没有出现bealdy异常&#xff0c;但是不排除我算错的可能</p>"}, {"folders": [], "updated": "2015-04-09T01:17:02Z", "uid": "hdjonbiyfs62ie", "created": "2015-04-09T01:17:02Z", "type": "feedback", "id": "i89h5lqp4yg6ei", "anon": "no", "bucket_name": "Week 4/5 - 4/11", "config": {}, "bucket_order": 160, "data": null, "children": [], "subject": "<p>好评。</p>\n<p></p>\n<p>你说的是对的&#xff0c;FIFO也并不是在所有情况下都一定会出现belady现象的。</p>\n<p></p>\n<p>请继续尝试给出可能的反例。</p>"}, {"folders": [], "updated": "2015-04-11T07:36:06Z", "uid": "i6t7bfshA1d", "created": "2015-04-11T07:36:06Z", "type": "feedback", "id": "i8cpksd1ysn4uu", "anon": "stud", "bucket_name": "Week 4/5 - 4/11", "config": {}, "bucket_order": 160, "data": null, "children": [], "subject": "<p><strong>依据上面的access pattern&#xff0c;访问过程如下</strong></p>\n<p><strong>1.当页面大小为3时</strong></p>\n<p><strong>access a: miss. Memory:[(&#39;a&#39;, 1)] head = 1</strong><br /><strong>access b: miss. Memory:[(&#39;a&#39;, 1), (&#39;b&#39;, 1)] head = 2</strong><br /><strong>access c: miss. Memory:[(&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1)] head = 0</strong><br /><strong>access d: miss. swap out a Memory:[(&#39;d&#39;, 1), (&#39;b&#39;, 0), (&#39;c&#39;, 0)] head = 1</strong><br /><strong>access a: miss. swap out b Memory:[(&#39;d&#39;, 1), (&#39;a&#39;, 1), (&#39;c&#39;, 0)] head = 2</strong><br /><strong>access b: miss. swap out c Memory:[(&#39;d&#39;, 1), (&#39;a&#39;, 1), (&#39;b&#39;, 1)] head = 0</strong><br /><strong>access e: miss. swap out d Memory:[(&#39;e&#39;, 1), (&#39;a&#39;, 0), (&#39;b&#39;, 0)] head = 1</strong><br /><strong>access a: hit! Memory:[(&#39;e&#39;, 1), (&#39;a&#39;, 1), (&#39;b&#39;, 0)] head = 1</strong><br /><strong>access b: hit! Memory:[(&#39;e&#39;, 1), (&#39;a&#39;, 1), (&#39;b&#39;, 1)] head = 1</strong><br /><strong>access c: miss. swap out a Memory:[(&#39;e&#39;, 0), (&#39;c&#39;, 1), (&#39;b&#39;, 0)] head = 2</strong><br /><strong>access d: miss. swap out b Memory:[(&#39;e&#39;, 0), (&#39;c&#39;, 1), (&#39;d&#39;, 1)] head = 0</strong><br /><strong>access e: hit! Memory:[(&#39;e&#39;, 1), (&#39;c&#39;, 1), (&#39;d&#39;, 1)] head = 0</strong><br /><strong>miss = 9</strong></p>\n<p></p>\n<p><strong>2.当页面大小为4时</strong></p>\n<p><strong>access a: miss. Memory:[(&#39;a&#39;, 1)] head = 1<br />access b: miss. Memory:[(&#39;a&#39;, 1), (&#39;b&#39;, 1)] head = 2<br />access c: miss. Memory:[(&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1)] head = 3<br />access d: miss. Memory:[(&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1), (&#39;d&#39;, 1)] head = 0<br />access a: hit! Memory:[(&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1), (&#39;d&#39;, 1)] head = 0<br />access b: hit! Memory:[(&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1), (&#39;d&#39;, 1)] head = 0<br />access e: miss. swap out a Memory:[(&#39;e&#39;, 1), (&#39;b&#39;, 0), (&#39;c&#39;, 0), (&#39;d&#39;, 0)] head = 1<br />access a: miss. swap out b Memory:[(&#39;e&#39;, 1), (&#39;a&#39;, 1), (&#39;c&#39;, 0), (&#39;d&#39;, 0)] head = 2<br />access b: miss. swap out c Memory:[(&#39;e&#39;, 1), (&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;d&#39;, 0)] head = 3<br />access c: miss. swap out d Memory:[(&#39;e&#39;, 1), (&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1)] head = 0<br />access d: miss. swap out e Memory:[(&#39;d&#39;, 1), (&#39;a&#39;, 0), (&#39;b&#39;, 0), (&#39;c&#39;, 0)] head = 1<br />access e: miss. swap out a Memory:[(&#39;d&#39;, 1), (&#39;e&#39;, 1), (&#39;b&#39;, 0), (&#39;c&#39;, 0)] head = 2<br />miss = 10</strong></p>\n<p><strong></strong></p>\n<p><b>以上为程序给出的结果&#xff0c;确实出现了belady异常。</b></p>\n<p><b>不知道是否有算错的地方&#xff0c;还是理解有问题&#xff0c;请指正。</b></p>"}, {"folders": [], "updated": "2015-04-11T14:55:27Z", "uid": "hdjonbiyfs62ie", "created": "2015-04-11T14:55:27Z", "type": "feedback", "id": "i8d59snzs1b2xf", "anon": "no", "bucket_name": "Week 4/5 - 4/11", "config": {}, "bucket_order": 160, "data": null, "children": [], "subject": "<p>很严谨的回答。我确认你的回答是正确的。</p>"}, {"folders": [], "updated": "2018-03-27T02:27:27Z", "uid": "it2wrxu13f13sy", "created": "2018-03-27T02:27:27Z", "type": "feedback", "id": "jf91jpkpwoj4bn", "anon": "no", "bucket_name": "Today", "config": {}, "bucket_order": 2, "data": null, "children": [], "subject": "<p>楼上算法和mooc上的算法不一致&#xff0c;但不影响最终结果。正确执行结果应该如下&#xff1a;</p>\n<p>1.当页面大小为3时<br />access a: miss. Memory:[^(&#39;a&#39;, 1)] head = 0<br />access b: miss. Memory:[^(&#39;a&#39;, 1), (&#39;b&#39;, 1)] head = 0<br />access c: miss. Memory:[^(&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1)] head = 0<br />access d: miss. swap out a Memory:[(&#39;d&#39;, 1), ^(&#39;b&#39;, 0), (&#39;c&#39;, 0)] head = 1<br />access a: miss. swap out b Memory:[(&#39;d&#39;, 1), (&#39;a&#39;, 1), ^(&#39;c&#39;, 0)] head = 2<br />access b: miss. swap out c Memory:[^(&#39;d&#39;, 1), (&#39;a&#39;, 1), (&#39;b&#39;, 1)] head = 0<br />access e: miss. swap out d Memory:[(&#39;e&#39;, 1), ^(&#39;a&#39;, 0), (&#39;b&#39;, 0)] head = 1<br />access a: hit! Memory:[(&#39;e&#39;, 1), ^(&#39;a&#39;, 1), (&#39;b&#39;, 0)] head = 1<br />access b: hit! Memory:[(&#39;e&#39;, 1), ^(&#39;a&#39;, 1), (&#39;b&#39;, 1)] head = 1<br />access c: miss. swap out a Memory:[(&#39;e&#39;, 0), (&#39;c&#39;, 1), ^(&#39;b&#39;, 0)] head = 2<br />access d: miss. swap out b Memory:[^(&#39;e&#39;, 0), (&#39;c&#39;, 1), (&#39;d&#39;, 1)] head = 0<br />access e: hit! Memory:[^(&#39;e&#39;, 1), (&#39;c&#39;, 1), (&#39;d&#39;, 1)] head = 0<br />miss = 9<br />2.当页面大小为4时<br />access a: miss. Memory:[^(&#39;a&#39;, 1)] head = 0<br />access b: miss. Memory:[^(&#39;a&#39;, 1), (&#39;b&#39;, 1)] head = 0<br />access c: miss. Memory:[^(&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1)] head = 0<br />access d: miss. Memory:[^(&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1), (&#39;d&#39;, 1)] head = 0<br />access a: hit! Memory:[^(&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1), (&#39;d&#39;, 1)] head = 0<br />access b: hit! Memory:[^(&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1), (&#39;d&#39;, 1)] head = 0<br />access e: miss. swap out a Memory:[(&#39;e&#39;, 1), ^(&#39;b&#39;, 0), (&#39;c&#39;, 0), (&#39;d&#39;, 0)] head = 1<br />access a: miss. swap out b Memory:[(&#39;e&#39;, 1), (&#39;a&#39;, 1), ^(&#39;c&#39;, 0), (&#39;d&#39;, 0)] head = 2<br />access b: miss. swap out c Memory:[(&#39;e&#39;, 1), (&#39;a&#39;, 1), (&#39;b&#39;, 1), ^(&#39;d&#39;, 0)] head = 3<br />access c: miss. swap out d Memory:[^(&#39;e&#39;, 1), (&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1)] head = 0<br />access d: miss. swap out e Memory:[(&#39;d&#39;, 1), ^(&#39;a&#39;, 0), (&#39;b&#39;, 0), (&#39;c&#39;, 0)] head = 1<br />access e: miss. swap out a Memory:[(&#39;d&#39;, 1), (&#39;e&#39;, 1), ^(&#39;b&#39;, 0), (&#39;c&#39;, 0)] head = 2<br />miss = 10</p>"}], "subject": "<p>因如果所有页的访问位都为1时&#xff0c;clock算法将退化为FIFO&#xff0c;可以构造如下序列</p>\n<p>a, b, c, d, a, b, e, a, b, c, d, e</p>\n<p>当物理页帧为3时&#xff0c;缺页次数为9次&#xff0c;当物理页帧为4时&#xff0c;缺页次数为10次。</p>"}, {"folders": [], "updated": "2018-03-27T04:07:24Z", "no_upvotes": 0, "uid": "it2wrxu13f13sy", "created": "2018-03-27T04:07:24Z", "type": "followup", "no_answer": 0, "id": "jf9548u5u212y0", "anon": "no", "bucket_name": "Today", "config": {}, "bucket_order": 2, "data": null, "children": [], "subject": "<p>根据上面同学的启发&#xff0c;对于大小为<strong>n</strong>和大小为<strong>n&#43;1</strong>的页面&#xff0c;一般地&#xff0c;可以构造如下反例&#xff1a;&#xff08;设最初的页表为空&#xff09;</p>\n<p><strong>a1a2..an&#43;1a1a2an&#43;2a1a2...an&#43;2</strong></p>\n<p></p>\n<p></p>\n<p></p>\n<p>access a1: miss. Memory:[^(&#39;a1&#39;, 1)] head = 0<br />access a2: miss. Memory:[^(&#39;a1&#39;, 1), (&#39;a2&#39;, 1)] head = 0<br />......(all miss)<br />access an: miss. Memory:[^(&#39;a1&#39;, 1), (&#39;a2&#39;, 1), ..., (&#39;an&#39;, 1)] head = 0<br />access an&#43;1: miss. swap out a1 Memory:[(&#39;an&#43;1&#39;, 1), ^(&#39;a2&#39;, 0), ..., (&#39;an&#39;, 0)] head = 1<br />access a1: miss. swap out a2 Memory:[(&#39;an&#43;1&#39;, 1), (&#39;a1&#39;, 1), ^(&#39;a3&#39;, 0), ..., (&#39;an&#39;, 0)] head = 2<br />access a2: miss. swap out a3 Memory:[(&#39;an&#43;1&#39;, 1), (&#39;a1&#39;, 1), (&#39;a2&#39;, 1), ^(&#39;a4&#39;, 0), ..., (&#39;an&#39;, 0)] head = 3<br />access an&#43;2: miss. swap out a4 Memory:[(&#39;an&#43;1&#39;, 1), (&#39;a1&#39;, 1), (&#39;a2&#39;, 1), (&#39;an&#43;2&#39;, 1), ^(&#39;a5&#39;, 0), ..., (&#39;an&#39;, 0)] head = 4<br />access a1: hit! Memory:[(&#39;an&#43;1&#39;, 1), (&#39;a1&#39;, 1), (&#39;a2&#39;, 1), (&#39;an&#43;2&#39;, 1), ^(&#39;a5&#39;, 0), ..., (&#39;an&#39;, 0)] head = 4<br />access a2: hit! Memory:[(&#39;an&#43;1&#39;, 1), (&#39;a1&#39;, 1), (&#39;a2&#39;, 1), (&#39;an&#43;2&#39;, 1), ^(&#39;a5&#39;, 0), ..., (&#39;an&#39;, 0)] head = 4<br />access a3: miss. swap out a5 Memory:[(&#39;an&#43;1&#39;, 1), (&#39;a1&#39;, 1), (&#39;a2&#39;, 1), (&#39;an&#43;2&#39;, 1), (&#39;a3&#39;, 1), ^(&#39;a6&#39;, 0), ..., (&#39;an&#39;, 0)] head = 5<br />......(all miss)<br />access an-2: miss. swap out an Memory:[^(&#39;an&#43;1&#39;, 1), (&#39;a1&#39;, 1), (&#39;a2&#39;, 1), (&#39;an&#43;2&#39;, 1), (&#39;a3&#39;, 1), ..., (&#39;an-2&#39;, 1)] head = 0<br />access an-1: miss. swap out an&#43;1 Memory:[(&#39;an-1&#39;, 1), ^(&#39;a1&#39;, 0), (&#39;a2&#39;, 0), (&#39;an&#43;2&#39;, 0), (&#39;a3&#39;, 0), ..., (&#39;an-2&#39;, 0)] head = 1<br />access an: miss. swap out a1 Memory:[(&#39;an-1&#39;, 1), (&#39;an&#39;, 1), ^(&#39;a2&#39;, 0), (&#39;an&#43;2&#39;, 0), (&#39;a3&#39;, 0), ..., (&#39;an-2&#39;, 0)] head = 2<br />access an&#43;1: miss. swap out a2 Memory:[(&#39;an-1&#39;, 1), (&#39;an&#39;, 1), (&#39;an&#43;1&#39;, 1), ^(&#39;an&#43;2&#39;, 0), (&#39;a3&#39;, 0), ..., (&#39;an-2&#39;, 0)] head = 3<br />access an&#43;2: hit! Memory:[(&#39;an-1&#39;, 1), (&#39;an&#39;, 1), (&#39;an&#43;1&#39;, 1), ^(&#39;an&#43;2&#39;, 1), (&#39;a3&#39;, 0), ..., (&#39;an-2&#39;, 0)] head = 3</p>\n<p></p>\n<p>hit 3 times.</p>\n<p></p>\n<p>对于大小为<strong>n&#43;1</strong>的页面&#xff1a;</p>\n<p>access a1: miss. Memory:[^(&#39;a1&#39;, 1)] head = 0<br />access a2: miss. Memory:[^(&#39;a1&#39;, 1), (&#39;a2&#39;, 1)] head = 0<br />......(all miss)<br />access an: miss. Memory:[^(&#39;a1&#39;, 1), (&#39;a2&#39;, 1), ..., (&#39;an&#39;, 1)] head = 0<br />access an&#43;1: miss. Memory:[^(&#39;a1&#39;, 1), (&#39;a2&#39;, 1), ..., (&#39;an&#39;, 1), (&#39;an&#43;1&#39;, 1)] head = 0<br />access a1: hit! Memory:[^(&#39;a1&#39;, 1), (&#39;a2&#39;, 1), ..., (&#39;an&#39;, 1), (&#39;an&#43;1&#39;, 1)] head = 0<br />access a2: hit! Memory:[^(&#39;a1&#39;, 1), (&#39;a2&#39;, 1), ..., (&#39;an&#39;, 1), (&#39;an&#43;1&#39;, 1)] head = 0<br />access an&#43;2: miss. swap out a1 Memory:[(&#39;an&#43;2&#39;, 1), ^(&#39;a2&#39;, 0), ..., (&#39;an&#39;, 0), (&#39;an&#43;1&#39;, 0)] head = 1<br />access a1: miss. swap out a2 Memory:[(&#39;an&#43;2&#39;, 1), (&#39;a1&#39;, 1), ^(&#39;a3&#39;, 0) ..., (&#39;an&#39;, 0), (&#39;an&#43;1&#39;, 0)] head = 2<br />......(all miss)<br />access an: miss. swap out an&#43;1 Memory:[^(&#39;an&#43;2&#39;, 1), (&#39;a1&#39;, 1), (&#39;a2&#39;, 1) ..., (&#39;an-1&#39;, 1), (&#39;an&#39;, 1)] head = 0<br />access an&#43;1: miss. swap out an&#43;2 Memory:[(&#39;an&#43;1&#39;, 1), ^(&#39;a1&#39;, 0), (&#39;a2&#39;, 0) ..., (&#39;an-1&#39;, 0), (&#39;an&#39;, 0)] head = 1<br />access an&#43;2: miss. swap out a1 Memory:[(&#39;an&#43;1&#39;, 1), (&#39;an&#43;2&#39;, 1), ^(&#39;a2&#39;, 0) ..., (&#39;an-1&#39;, 0), (&#39;an&#39;, 0)] head = 2</p>\n<p>hit twice.</p>\n<p></p>\n<p>我并没有找到一种反例的通式&#xff0c;使得对于任意正整数k&#xff0c;都可以找到某一个序列&#xff0c;使得n的hit数 - n&#43;1的hit数 &gt; k。只有找到这样的序列通式&#xff0c;才可以说明clock置换算法的Belady现象是严重的。&#xff08;否则像上面这个反例&#xff0c;只能说明稍微有点性能下降&#xff09;</p>\n<p></p>\n<p></p>"}], "nr": 214, "bucket_order": 2, "type": "question", "folders": ["quiz9"], "no_answer_followup": 0, "num_favorites": 4, "bucket_name": "Today", "q_edits": [], "data": {"embed_links": []}, "request_instructor": 0, "tags": ["instructor-question", "quiz9"], "created": "2015-03-30T15:12:28Z", "is_tag_good": false, "config": {}, "s_edits": [], "my_favorite": false, "default_anonymity": "no", "t": 1522131820022, "tag_good": [{"name": "Yu Chen", "admin": true, "photo": "1378950179_35.png", "endorser": {}, "us": false, "email": "yuchen@mail.tsinghua.edu.cn", "class_sections": ["课程设计_i5j09fnsl7k5x0", "清华学生_i5j09fnsl7k5x0", "所有老师和助教_i5j09fnsl7k5x0", "os2018spring_i5j09fnsl7k5x0"], "role": "instructor", "facebook_id": null, "id": "hcrrjuyequh4bt", "admin_permission": 10}], "tag_good_arr": ["hcrrjuyequh4bt"], "history": [{"content": "<p>我认为时钟置换算法是存在belady现象的。原因是&#xff0c;它不具备LRU的特殊栈特征。构造反例的思路是&#xff0c;分配指定数目的物理页面给一个进程&#xff0c;然后构造一个访问序列&#xff0c;你换出哪个页面&#xff0c;下一次就访问它。那么&#xff0c;对于这个访问序列&#xff0c;少一个物理页面时&#xff0c;它的缺页次数应该会少。</p>\n<p></p>\n<p>请有兴趣的同学尝试构造一个例子&#xff0c;并在这里回复。</p>", "anon": "no", "created": "2015-03-30T15:12:28Z", "uid": "hdjonbiyfs62ie", "subject": "时钟置换算法存在的Belady现象的反例&#xff1f;"}]}, "error": null}