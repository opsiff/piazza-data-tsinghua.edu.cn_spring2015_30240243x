{"aid": "igkp3zaimb22t5", "error": null, "result": {"default_anonymity": "no", "status": "active", "i_edits": [], "q_edits": [], "bookmarked": 4, "request_instructor": 0, "history": [{"uid": "i6xxjjocYdf", "anon": "no", "created": "2015-03-16T14:25:47Z", "content": "<p>1. 我看了 lab1_result 的实现&#xff0c;在处理向用户态切换的部分中&#xff0c;将 (uint32_t *)tf - 1 的内容换成了 switchk2u 的地址&#xff0c;我猜测这是因为在进入中断时&#xff0c;是内核态进入内核态&#xff0c;因此 CPU 没有压入 esp 与 ss&#xff0c;但在退出中断时&#xff0c;将从内核态返回用户态&#xff0c;原本的 trapframe 里并不包含 esp 与 ss&#xff0c;所以建立了一个临时的 trapframe&#xff0c;是不是这样&#xff1f;</p>\n<p>2. 而在处理向内核态切换的部分中&#xff0c;由于进入中断时&#xff0c;是用户态进入内核态&#xff0c;而退出中断时&#xff0c;是内核态返回内核态&#xff0c;所以要去掉最后的 esp 与 ss。在这里我对这一行不太了解&#xff1a;</p>\n<pre>switchu2k = (struct trapframe *)(tf-&gt;tf_esp - (sizeof(struct trapframe) - 8));</pre>\n<p>为什么不可以直接用原来的 trapframe 地址呢&#xff1f;我试着将原来的 trapframe&#xff08;不含 esp 与 ss&#xff09;向后挪动了 8 个字节&#xff0c;再把 ((uint32_t *)tf - 1) 的内容换为挪动后的地址&#xff0c;结果程序挂了&#xff0c;求解…</p>", "subject": "lab 1 challenge 1 的问题"}, {"uid": "i6xxjjocYdf", "anon": "no", "created": "2015-03-16T14:04:56Z", "content": "<p>1. 我看了 lab1_result 的实现&#xff0c;在处理向用户态切换的部分中&#xff0c;将 (uint32_t *)tf - 1 的内容换成了 switchk2u 的地址&#xff0c;我猜测这是因为在进入中断时&#xff0c;是内核态进入内核态&#xff0c;因此 CPU 没有压入 esp 与 ss&#xff0c;但在退出中断时&#xff0c;将从内核态返回用户态&#xff0c;原本的 trapframe 里并不包含 esp 与 ss&#xff0c;所以建立了一个临时的 trapframe&#xff0c;是不是这样&#xff1f;</p>\n<p>2. 而在处理向内核态切换的部分中&#xff0c;由于进入中断时&#xff0c;是用户态进入内核态&#xff0c;而退出中断时&#xff0c;是内核态返回内核态&#xff0c;所以要去掉最后的 esp 与 ss。在这里我对这一行不太了解&#xff1a;</p>\n<pre>switchu2k = (struct trapframe *)(tf-&gt;tf_esp - (sizeof(struct trapframe) - 8));</pre>\n<p>为什么不可以直接用原来的 trapframe 地址呢&#xff1f;我试着将原来的 trapframe&#xff08;不含 esp 与 ss&#xff09;向后挪动了 8 个字节&#xff0c;再把 ((uint32_t *)tf - 1) 的内容换乘挪动后的地址&#xff0c;结果程序挂了&#xff0c;求解…</p>", "subject": "lab 1 challenge 1 的问题"}], "s_edits": [], "is_bookmarked": false, "tag_good_arr": ["i7c0xilj1k44kf", "i6t76fg9sEh"], "request_instructor_me": false, "my_favorite": false, "t": 1446634970730, "children": [{"is_tag_endorse": false, "created": "2015-03-17T00:28:22Z", "id": "i7ckaf8ev1r20d", "tag_endorse": [{"name": "Ray Chow", "id": "i6xxjjocYdf", "role": "student", "facebook_id": null, "photo": null, "admin": false, "us": false}], "folders": [], "history": [{"uid": "hdjoucuyb836fq", "anon": "no", "created": "2015-03-17T00:28:22Z", "content": "<p>这一行的意思与你所述一样&#xff0c;就是“将原来的 trapframe&#xff08;不含 esp 与 ss&#xff09;向后挪动了 8 个字节&#xff0c;再把 ((uint32_t *)tf - 1) 的内容换为挪动后的地址”&#xff0c;我这边变换了switchu2k的计算方法&#xff0c;测试仍然可以通过&#xff0c;请再次检查一下你的实现。</p>\n<p></p>\n<p>将相关的地址用cprintf打印出来会有助于分析和调试。</p>", "subject": ""}], "config": {}, "data": {"embed_links": []}, "bucket_order": 2, "bucket_name": "Today", "tag_endorse_arr": ["i6xxjjocYdf"], "children": [], "type": "i_answer"}, {"uid": "i72xyao1QhO", "no_answer": 0, "created": "2015-03-17T01:07:59Z", "id": "i7clpcv92vdbo", "updated": "2015-03-17T01:07:59Z", "subject": "<p>扩展实验中移动的8字节的这部分貌似能从切换的代码中看出来?这个在ucore提示中有,说是tf结构中的ss和esp在切换时候有用处,但是在trapentry中看不出来,难道是硬件里面这么规定的???求解</p>", "anon": "no", "folders": [], "config": {}, "data": {"embed_links": null}, "bucket_order": 3, "bucket_name": "Yesterday", "no_upvotes": 0, "d-bucket": "Yesterday", "children": [{"uid": "hdjoucuyb836fq", "created": "2015-03-17T01:50:37Z", "id": "i7cn86z21z24ch", "updated": "2015-03-17T01:50:37Z", "subject": "<p>不太明白你想问的是什么……</p>\n<p></p>\n<p>就硬件来说&#xff0c;执行iret时存在两种情况&#xff0c;一是栈上保存的CS的权限级别&#xff08;内核态或用户态&#xff09;与当前一致&#xff0c;不考虑ss和esp&#xff1b;二是栈上保存的权限级别与当前不同&#xff0c;需要恢复ss和esp。OS的任务&#xff0c;是利用iret的功能&#xff0c;在修改CS的同时不改动其它寄存器的值。</p>", "anon": "no", "folders": [], "config": {}, "data": {"embed_links": null}, "bucket_order": 3, "bucket_name": "Yesterday", "d-bucket": "Yesterday", "children": [], "type": "feedback"}, {"uid": "i72xyao1QhO", "created": "2015-03-17T01:55:04Z", "id": "i7cndwijohr3x3", "updated": "2015-03-17T01:55:04Z", "subject": "<p>不好意思,可能说的不明确,简单说来就是:切换时的函数是trapentry,但是那段代码压入的东西是明确的,但是内核态和用户态直接切换的时候,多压了两个寄存器ss和esp,这个压入过程是硬件实现的么?我在代码中未看到相应的部分,</p>", "anon": "no", "folders": [], "config": {}, "data": {"embed_links": null}, "bucket_order": 3, "bucket_name": "Yesterday", "d-bucket": "Yesterday", "children": [], "type": "feedback"}, {"uid": "i72xyao1QhO", "created": "2015-03-17T02:03:46Z", "id": "i7cnp3viv845m5", "updated": "2015-03-17T02:03:46Z", "subject": "<p>哦,,那就是硬件方面实现的,因为在执行iret的时候,在权限级别上识别了用户态和内核态,从而处理了多出来的ss和esp,这个我在其他资料上看得是说,在内核态直接切换的时候,ss和esp可以从tss中获得,所以不用保存而用户态和内核态之间的时候,需要保存用户态的ss和esp,所以就多了这个区别</p>", "anon": "no", "folders": [], "config": {}, "data": {"embed_links": null}, "bucket_order": 3, "bucket_name": "Yesterday", "d-bucket": "Yesterday", "children": [], "type": "feedback"}, {"uid": "hdjoucuyb836fq", "created": "2015-03-17T02:10:24Z", "id": "i7cnxmfs2x15wx", "updated": "2015-03-17T02:10:24Z", "subject": "<p>tss的作用是用户态触发中断进入内核态时&#xff0c;CPU获取内核栈所在的位置&#xff1b;因为这是ss和esp被修改了&#xff0c;所以需要在栈上保存ss和esp。</p>\n<p></p>\n<p>内核态切换内核态时&#xff0c;ss没有修改&#xff0c;esp也只是移动了几个字节而已&#xff0c;所以硬件不保存ss和esp。</p>", "anon": "no", "folders": [], "config": {}, "data": {"embed_links": null}, "bucket_order": 3, "bucket_name": "Yesterday", "d-bucket": "Yesterday", "children": [], "type": "feedback"}], "type": "followup"}, {"uid": "i72xyao1QhO", "no_answer": 0, "created": "2015-03-17T01:52:09Z", "id": "i7cna5t5rzd4ok", "updated": "2015-03-17T01:52:09Z", "subject": "<p>直接在原来的栈上改动的话难道应该比较大吧!因为函数切换的时候,栈是连续的,((uint32_t *)tf - 1) 能直接换成是上一个trapframe,但是是不完全的,因为最开始的时候没有压用户的ss和esp,这个应该是在最开头(栈的高位置),后面压了不全的trapframe,然后后面继续在这个栈上压了trap函数的esp(相当于参数地址),eip,trap_dispatch的参数地址以及其ebp,eip还有一些局部变量,,这个时候,要改的话,可定会覆盖前面的,除非整体移动,,但是这个不好搞吧??</p>\n<p>目前栈的示意:</p>\n<p>-----------栈顶</p>\n<p>各种局部变量(trap_dispatch中的局部变量)</p>\n<p>eip(trap_dispatch函数压入)</p>\n<p>ebp(trap_dispatch函数压入)</p>\n<p>trapfram指针(trap_dispatch参数)</p>\n<p>eip(trapentry中的call指令压入的)</p>\n<p>esp(就是个参数,相当于那个trapframe指针)</p>\n<p>trapframe(不含ss和esp)</p>\n<p>老数据</p>\n<p>-----------栈底</p>\n<p>想要达到的效果,就是在下面的trapframe(不含ss和esp)之下在多ss和esp,,前面一部分都得挪</p>\n<p>-----------栈顶</p>\n<p>各种局部变量(trap_dispatch中的局部变量)</p>\n<p>eip(trap_dispatch函数压入)</p>\n<p>ebp(trap_dispatch函数压入)</p>\n<p>trapfram指针(trap_dispatch参数)</p>\n<p>eip(trapentry中的call指令压入的)</p>\n<p>esp(就是个参数,相当于那个trapframe指针)</p>\n<p>trapframe(不含ss和esp)</p>\n<p>esp</p>\n<p>ss</p>\n<p>老数据</p>\n<p>-----------栈底</p>", "anon": "no", "folders": [], "config": {}, "data": {"embed_links": null}, "bucket_order": 3, "bucket_name": "Yesterday", "no_upvotes": 0, "d-bucket": "Yesterday", "children": [{"uid": "hdjoucuyb836fq", "created": "2015-03-17T02:14:03Z", "id": "i7co2bw8htc4cp", "updated": "2015-03-17T02:14:03Z", "subject": "<p>你所说的是内核态转用户态时发生的事情&#xff0c;这是因为tf需要多放两个寄存器的值&#xff0c;现有的栈放不下&#xff0c;所以ucore里才会有一个静态全局变量switchk2u作为临时的tf。</p>\n<p></p>\n<p>而问题里所讨论的是用户态转内核态的事情&#xff08;u2k&#xff09;&#xff0c;这是tf需要少放两个寄存器的值&#xff0c;所以可以直接在栈上改动。</p>", "anon": "no", "folders": [], "config": {}, "data": {"embed_links": null}, "bucket_order": 3, "bucket_name": "Yesterday", "d-bucket": "Yesterday", "children": [], "type": "feedback"}, {"uid": "i72xyao1QhO", "created": "2015-03-17T02:18:17Z", "id": "i7co7ri9zv83xv", "updated": "2015-03-17T02:18:17Z", "subject": "<p>恩恩,,对,,k2u没法直接,u2k可以,而且ucore参考答案就是这么实现的,很经典啊,感觉其实ucore参考答案不应该这么给,应该给个粗制滥造的,然后让我们在理解之后再去优化它</p>", "anon": "no", "folders": [], "config": {}, "data": {"embed_links": null}, "bucket_order": 3, "bucket_name": "Yesterday", "d-bucket": "Yesterday", "children": [], "type": "feedback"}], "type": "followup"}, {"uid": "i6xxjjocYdf", "no_answer": 0, "created": "2015-03-17T04:15:29Z", "id": "i7csehc06882fc", "updated": "2015-03-17T04:15:29Z", "subject": "<p>感谢老师的解答&#xff0c;我发现是因为没有在 lab1_switch_to_kernel() 里恢复 %esp 导致了错误。</p>\n<p>另外&#xff0c;我还发现 lab1_switch_to_user() 在进入中断之前&#xff0c;先把 %esp 减 8&#xff0c;就留出了之后 trapframe 的 esp 与 ss 的空间&#xff0c;因此连临时的 switchk2u 都不需要了&#xff0c;直接在原 tf 上面修改就可以&#xff0c;例如&#xff1a;</p>\n<pre>    // 进入中断\n    asm volatile (\n            &#34;sub $0x8, %%esp;&#34;\n            &#34;int %0;&#34;\n            &#34;movl %%ebp, %%esp;&#34;\n            :\n            : &#34;i&#34; (T_SWITCH_TOU));\n\n    // 中断处理函数\n    if (USER_CS != tf-&gt;tf_cs) {\n        tf-&gt;tf_cs = USER_CS;\n        tf-&gt;tf_ds = USER_DS;\n        tf-&gt;tf_es = USER_DS;\n        tf-&gt;tf_fs = USER_DS;\n        tf-&gt;tf_gs = USER_DS;\n        tf-&gt;tf_eflags |= FL_IOPL_MASK;\n        tf-&gt;tf_ss = USER_DS;\n    }</pre>\n<p></p>", "anon": "no", "folders": [], "config": {}, "data": {"embed_links": null}, "bucket_order": 3, "bucket_name": "Yesterday", "no_upvotes": 0, "d-bucket": "Yesterday", "children": [{"uid": "i72xyao1QhO", "created": "2015-03-17T07:37:16Z", "id": "i7czlzsjh5n1d0", "updated": "2015-03-17T07:37:16Z", "subject": "<p>恩恩,是这样的,</p>", "anon": "no", "folders": [], "config": {}, "data": {"embed_links": null}, "bucket_order": 3, "bucket_name": "Yesterday", "d-bucket": "Yesterday", "children": [], "type": "feedback"}], "type": "followup"}], "type": "question", "unique_views": 95, "created": "2015-03-16T14:04:55Z", "id": "i7by0ny5b792pw", "no_answer": 0, "nr": 122, "data": {"embed_links": []}, "upvote_ids": [], "is_tag_good": false, "config": {}, "folders": ["lab1"], "bucket_order": 2, "change_log": [{"uid": "i6xxjjocYdf", "when": "2015-03-16T14:04:56Z", "data": "i7by0ny8cyc2px", "anon": "no", "type": "create"}, {"uid": "i6xxjjocYdf", "when": "2015-03-16T14:25:47Z", "data": "i7byrh956hy2bm", "anon": "no", "type": "update"}, {"uid": "hdjoucuyb836fq", "when": "2015-03-17T00:28:22Z", "data": "i7ckaf8indg20e", "to": "i7by0ny5b792pw", "anon": "no", "type": "i_answer"}, {"uid": "i72xyao1QhO", "when": "2015-03-17T01:07:59Z", "to": "i7by0ny5b792pw", "anon": "no", "type": "followup"}, {"uid": "hdjoucuyb836fq", "when": "2015-03-17T01:50:37Z", "to": "i7by0ny5b792pw", "anon": "no", "type": "feedback"}, {"uid": "i72xyao1QhO", "when": "2015-03-17T01:52:09Z", "to": "i7by0ny5b792pw", "anon": "no", "type": "followup"}, {"uid": "i72xyao1QhO", "when": "2015-03-17T01:55:04Z", "to": "i7by0ny5b792pw", "anon": "no", "type": "feedback"}, {"uid": "i72xyao1QhO", "when": "2015-03-17T02:03:46Z", "to": "i7by0ny5b792pw", "anon": "no", "type": "feedback"}, {"uid": "hdjoucuyb836fq", "when": "2015-03-17T02:10:24Z", "to": "i7by0ny5b792pw", "anon": "no", "type": "feedback"}, {"uid": "hdjoucuyb836fq", "when": "2015-03-17T02:14:03Z", "to": "i7by0ny5b792pw", "anon": "no", "type": "feedback"}, {"uid": "i72xyao1QhO", "when": "2015-03-17T02:18:17Z", "to": "i7by0ny5b792pw", "anon": "no", "type": "feedback"}, {"uid": "i6xxjjocYdf", "when": "2015-03-17T04:15:29Z", "to": "i7by0ny5b792pw", "anon": "no", "type": "followup"}, {"uid": "i72xyao1QhO", "when": "2015-03-17T07:37:16Z", "to": "i7by0ny5b792pw", "anon": "no", "type": "feedback"}], "bucket_name": "Today", "tags": ["lab1", "student"], "no_answer_followup": 0, "num_favorites": 3, "tag_good": [{"class_sections": ["课程设计_i5j09fnsl7k5x0"], "name": "Darin", "id": "i7c0xilj1k44kf", "role": "student", "facebook_id": null, "photo": null, "admin": false, "us": false}, {"name": "yangyuantianming", "id": "i6t76fg9sEh", "role": "student", "facebook_id": null, "photo": null, "admin": false, "us": false}]}}